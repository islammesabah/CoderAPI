[
    {
        "api": "PyDrive2",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install pydrive2\nfrom pydrive2.auth import GoogleAuth\nfrom pydrive2.drive import GoogleDrive\n\n# Function to authenticate and get the GoogleDrive instance\ndef authenticate_drive():\n    gauth = GoogleAuth()\n    gauth.LocalWebserverAuth()  # Authenticate using local webserver\n    return GoogleDrive(gauth)\n\ndef get_file_metadata(file_id):\n    drive = authenticate_drive()\n    \n    try:\n        file = drive.CreateFile({'id': file_id})\n        if not file:\n            print(f\"File with ID '{file_id}' does not exist on Google Drive.\")\n            return\n        \n        print(\"File Metadata:\")\n        print(f\"Title: {file['title']}\")\n        print(f\"Size: {file['fileSize']} bytes\")\n        print(f\"Creation Date: {file['createdDate']}\")\n        print(f\"Last Modified Date: {file['modifiedDate']}\")\n    except Exception as e:\n        print(f\"Error retrieving file metadata: {e}\")\n\nif __name__ == \"__main__\":\n    file_id = input(\"Enter the file ID on Google Drive to retrieve metadata: \")\n    \n    get_file_metadata(file_id)",
        "instruction": "Create a Python program that retrieves the metadata of a file on Google Drive using the PyDrive2 API. The program should take the file ID as input and display the metadata information of the file, including its title, size, creation date, and last modified date. Make sure the program is capable of handling cases where the file ID provided is invalid or when there is an authentication issue.",
        "prediction": ":!pip install pydrive2\nfrom pydrive2.auth import GoogleAuth\nfrom pydrive2.drive import GoogleDrive\n\n# Function to authenticate and get the GoogleDrive instance\ndef authenticate_drive():\n    gauth = GoogleAuth()\n    gauth.LocalWebserverAuth()  # Authenticate using local webserver\n    return GoogleDrive(gauth)\n\ndef get_file_metadata(file_id):\n    drive = authenticate_drive()\n    \n    try:\n        return drive.CreateFile({'id': file_id}).Get\ufffdself_info_displayed()\n    except Exception as e:\n        print(f\"Error retrieving file metadata: {e}\")\n\nif __name__ == \"__main__\":\n    file_id = input(\"Enter the file ID on Google Drive to retrieve metadata: \")\n    file_metadata = get_file_metadata(file_id)\n    \n    print(f\"File Title: {file_metadata['title']}\")\n    print(f\"Size: {file_metadata['size']}\")\n    print(f\"Creation Date: {file_metadata['createdDate']}\")\n    print(f\"Last Modified Date: {file_metadata['lastModifiedDate']}\")",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that retrieves the metadata of a file on Google Drive using the PyDrive2 API. The program should take the file ID as input and display the metadata information of the file, including its title, size, creation date, and last modified date. Make sure the program is capable of handling cases where the file ID provided is invalid or when there is an authentication issue.\n\n### Response:"
    },
    {
        "api": "PyDrive2",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install pydrive2\nfrom pydrive2.auth import GoogleAuth\nfrom pydrive2.drive import GoogleDrive\n\n# Function to authenticate and get the GoogleDrive instance\ndef authenticate_drive():\n    gauth = GoogleAuth()\n    gauth.LocalWebserverAuth()  # Authenticate using local webserver\n    return GoogleDrive(gauth)\n\ndef get_permissions(file_or_folder_id):\n    drive = authenticate_drive()\n    \n    try:\n        file_or_folder = drive.CreateFile({'id': file_or_folder_id})\n        if not file_or_folder:\n            print(f\"File or folder with ID '{file_or_folder_id}' does not exist on Google Drive.\")\n            return\n        \n        permissions = file_or_folder.GetPermissions()\n        \n        print(f\"Permissions for file or folder with ID '{file_or_folder_id}':\")\n        \n        for permission in permissions:\n            print(f\"Email Address: {permission['emailAddress']}, Role: {permission['role']}\")\n    except Exception as e:\n        print(f\"Error retrieving permissions: {e}\")\n\nif __name__ == \"__main__\":\n    file_or_folder_id = input(\"Enter the file or folder ID on Google Drive to retrieve permissions: \")\n    \n    get_permissions(file_or_folder_id)",
        "instruction": "Create a Python program that retrieves the list of permissions for a file or folder on Google Drive using the PyDrive2 API. The program should take the file or folder ID as input and display the list of permissions, including the email addresses and roles of the users or groups that have access to the file or folder. Make sure the program is capable of handling cases where the file or folder ID provided is invalid or when there is an authentication issue.",
        "prediction": ":!pip install pydrive2\nimport pydrive2\nfrom pydrive2.auth import GoogleAuth\nfrom pydrive2.drive import GoogleDrive\n\ndef retrieve_list_of_permissions(file_or_folder_id):\n    gauth = GoogleAuth()\n    gauth.LocalWebserverAuth()  # Authenticate using local webserver\n    drive = GoogleDrive(gauth)\n    \n    try:\n        file_or_folder = drive.CreateFile({'id': file_or_folder_id})\n        \n        permissions = file_or_folder.GetPermissions()\n        \n        email_addresses = [permission['emailAddress'] for permission in permissions]\n        roles = [permission['role'] for permission in permissions]\n        \n        print(f\"Email addresses: {email_addresses}\")\n        print(f\"Roles: {roles}\")\n    except Exception as e:\n        print(f\"Error retrieving permissions: {e}\")\n\nif __name__ == \"__main__\":\n    file_or_folder_id = input(\"Enter the file or folder ID on Google Drive to retrieve list of permissions: \")\n    \n    retrieve_list_of_permissions(file_or_folder_id)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that retrieves the list of permissions for a file or folder on Google Drive using the PyDrive2 API. The program should take the file or folder ID as input and display the list of permissions, including the email addresses and roles of the users or groups that have access to the file or folder. Make sure the program is capable of handling cases where the file or folder ID provided is invalid or when there is an authentication issue.\n\n### Response:"
    },
    {
        "api": "PyDrive2",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install pydrive2\nfrom pydrive2.auth import GoogleAuth\nfrom pydrive2.drive import GoogleDrive\n\n# Function to authenticate and get the GoogleDrive instance\ndef authenticate_drive():\n    gauth = GoogleAuth()\n    gauth.LocalWebserverAuth()  # Authenticate using local webserver\n    return GoogleDrive(gauth)\n\ndef list_files_in_drive_folder(folder_id):\n    drive = authenticate_drive()\n    \n    try:\n        folder = drive.CreateFile({'id': folder_id})\n        if not folder:\n            print(f\"Folder with ID '{folder_id}' does not exist on Google Drive.\")\n            return\n        \n        folder_title = folder['title']\n        print(f\"Listing files in '{folder_title}' folder (ID: {folder_id}):\")\n        \n        file_list = drive.ListFile({'q': f\"'{folder_id}' in parents and trashed=false\"}).GetList()\n        if not file_list:\n            print(\"No files found in this folder.\")\n            return\n        \n        for file in file_list:\n            print(f\"File Name: {file['title']}, File ID: {file['id']}\")\n    except Exception as e:\n        print(f\"Error listing files: {e}\")\n\nif __name__ == \"__main__\":\n    folder_id = input(\"Enter the folder ID on Google Drive to list files from: \")\n    \n    list_files_in_drive_folder(folder_id)",
        "instruction": "Create a Python program that lists all files in a specified folder on Google Drive using the PyDrive2 API. The program should take the folder's ID as input and display a list of file names along with their corresponding IDs. Make sure the program is capable of handling cases where the folder ID provided does not exist or when there is an authentication issue.",
        "prediction": ":!pip install pydrive2\nfrom pydrive2.auth import GoogleAuth\nfrom pydrive2.drive import GoogleDrive\n\n# Function to authenticate and get the GoogleDrive instance\ndef authenticate_drive():\n    gauth = GoogleAuth()\n    gauth.LocalWebserverAuth()  # Authenticate using local webserver\n    return GoogleDrive(gauth)\n\ndef list_files_on_drive(folder_id):\n    drive = authenticate_drive()\n    \n    try:\n        folder = drive.CreateFile({'id': folder_id})\n        if not folder:\n            print(f\"Folder with ID '{folder_id}' does not exist on Google Drive.\")\n            return\n        \n        print(f\"Files on Google Drive:\")\n        \n        try:\n            folder_list = folder.GetListFile({'q': f\"'{folder_id}' in parents and trashed=false\"})\n            \n            for file in folder_list:\n                print(f\"File Name: {file['title']}, File ID: {file['id']}\")\n            \n            return folder_list\n        except Exception as e:\n            print(f\"Error listing files: {e}\")\n            \n    except Exception as e:\n        print(f\"Error listing files: {e}\")\n\nif __name__ == \"__main__\":\n    folder_id = input(\"Enter the folder ID on Google Drive to list files: \")\n    \n    list_files_on_drive(folder_id)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that lists all files in a specified folder on Google Drive using the PyDrive2 API. The program should take the folder's ID as input and display a list of file names along with their corresponding IDs. Make sure the program is capable of handling cases where the folder ID provided does not exist or when there is an authentication issue.\n\n### Response:"
    },
    {
        "api": "Pygments",
        "decoder_input_ids": true,
        "ground-truth": "# !pip install Pygments\nfrom pygments import highlight\nfrom pygments.lexers import get_lexer_by_name\nfrom pygments.formatters import ExcelFormatter\n\n# Read the code file\nwith open(\"code.py\", \"r\") as file:\n    code = file.read()\n\n# Determine the lexer based on the file extension\nlexer = get_lexer_by_name(\"python\")\n\n# Define a custom formatter with a custom color scheme and line numbers\nformatter = ExcelFormatter(style=\"friendly\", linenos=True)\n\n# Apply syntax highlighting to the code with the custom color scheme and line numbers\nhighlighted_code = highlight(code, lexer, formatter)\n\n# Save the highlighted code to an Excel file (XLSX) with the custom color scheme and line numbers\nwith open(\"highlighted_code.xlsx\", \"wb\") as xlsx_file:\n    xlsx_file.write(highlighted_code)",
        "instruction": "Create a Python program using the 'Pygments' API to apply syntax highlighting to a code file and save the highlighted code as an Excel file (XLSX) with a custom color scheme and line numbers.",
        "prediction": ":!pip install Pygments\nfrom pygments import highlight\nfrom pygments.lexers import get_lexer_by_name\nfrom pygments.formatters import ExcelFormatter\n\n# Read the code file\nwith open(\"code.py\", \"r\") as file:\n    code = file.read()\n\n# Determine the lexer based on the file extension\nlexer = get_lexer_by_name(\"python\")\n\n# Define a custom formatter with a custom color scheme and line numbers\nformatter = ExcelFormatter(style=\"autumn\", linenos=True)\n\n# Apply syntax highlighting to the code with the custom color scheme and line numbers\nhighlighted_code = highlight(code, lexer, formatter)\n\n# Save the highlighted code to an Excel file (XLSX) with the custom color scheme and line numbers\nwith open(\"highlighted_code.xlsx\", \"wb\") as xlsx_file:\n    xlsx_file.write(highlighted_code)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'Pygments' API to apply syntax highlighting to a code file and save the highlighted code as an Excel file (XLSX) with a custom color scheme and line numbers.\n\n### Response:"
    },
    {
        "api": "Pygments",
        "decoder_input_ids": true,
        "ground-truth": "# !pip install Pygments\nfrom pygments import highlight\nfrom pygments.lexers import get_lexer_by_name\nfrom pygments.formatters import ExcelFormatter\n\n# Read the code file\nwith open(\"code.py\", \"r\") as file:\n    code = file.read()\n\n# Determine the lexer based on the file extension\nlexer = get_lexer_by_name(\"python\")\n\n# Apply syntax highlighting to the code\nhighlighted_code = highlight(code, lexer, ExcelFormatter())\n\n# Save the highlighted code to an Excel file (XLSX)\nwith open(\"highlighted_code.xlsx\", \"wb\") as xlsx_file:\n    xlsx_file.write(highlighted_code)",
        "instruction": "Create a Python program using the 'Pygments' API to apply syntax highlighting to a code file and save the highlighted code as an Excel file (XLSX).",
        "prediction": ":!pip install Pygments\nfrom pygments import highlight\nfrom pygments.lexers import get_lexer_by_name\nfrom pygments.formatters import ExcelFormatter\n\n# Read the code file\nwith open(\"code.py\", \"r\") as file:\n    code = file.read()\n\n# Determine the lexer based on the file extension\nlexer = get_lexer_by_name(\"python\")\n\n# Apply syntax highlighting to the code\nhighlighted_code = highlight(code, lexer, ExcelFormatter())\n\n# Save the highlighted code to an Excel file (XLSX)\nwith open(\"highlighted_code.xlsx\", \"wb\") as xlsx_file:\n    xlsx_file.write(highlighted_code)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'Pygments' API to apply syntax highlighting to a code file and save the highlighted code as an Excel file (XLSX).\n\n### Response:"
    },
    {
        "api": "Pygments",
        "decoder_input_ids": true,
        "ground-truth": "# !pip install Pygments\nfrom pygments import highlight\nfrom pygments.lexers import get_lexer_by_name\nfrom pygments.formatters import CsvFormatter\n\n# Read the code file\nwith open(\"code.py\", \"r\") as file:\n    code = file.read()\n\n# Determine the lexer based on the file extension\nlexer = get_lexer_by_name(\"python\")\n\n# Apply syntax highlighting to the code\nhighlighted_code = highlight(code, lexer, CsvFormatter())\n\n# Save the highlighted code to a CSV file\nwith open(\"highlighted_code.csv\", \"w\") as csv_file:\n    csv_file.write(highlighted_code)",
        "instruction": "Create a Python program using the 'Pygments' API to apply syntax highlighting to a code file and save the highlighted code as a CSV file.",
        "prediction": ":!pip install Pygments\nfrom pygments import highlight\nfrom pygments.lexers import get_lexer_by_name\nfrom pygments.formatters import CsvFormatter\n\n# Read the code file\nwith open(\"code.py\", \"r\") as file:\n    code = file.read()\n\n# Determine the lexer based on the file extension\nlexer = get_lexer_by_name(\"python\")\n\n# Apply syntax highlighting to the code\nhighlighted_code = highlight(code, lexer, CsvFormatter())\n\n# Save the highlighted code to a CSV file\nwith open(\"highlighted_code.csv\", \"w\") as csv_file:\n    csv_file.write(highlighted_code)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'Pygments' API to apply syntax highlighting to a code file and save the highlighted code as a CSV file.\n\n### Response:"
    },
    {
        "api": "Pygments",
        "decoder_input_ids": true,
        "ground-truth": "# !pip install Pygments\nfrom pygments import highlight\nfrom pygments.lexers import get_lexer_by_name\nfrom pygments.formatters import CsvFormatter\n\n# Read the code file\nwith open(\"code.py\", \"r\") as file:\n    code = file.read()\n\n# Determine the lexer based on the file extension\nlexer = get_lexer_by_name(\"python\")\n\n# Define a custom formatter with a custom color scheme and line numbers\nformatter = CsvFormatter(style=\"fruity\", linenos=True)\n\n# Apply syntax highlighting to the code with the custom color scheme and line numbers\nhighlighted_code = highlight(code, lexer, formatter)\n\n# Save the highlighted code to a CSV file with the custom color scheme and line numbers\nwith open(\"highlighted_code.csv\", \"w\") as csv_file:\n    csv_file.write(highlighted_code)",
        "instruction": "Create a Python program using the 'Pygments' API to apply syntax highlighting to a code file and save the highlighted code as a CSV file with a custom color scheme and line numbers.",
        "prediction": ":!pip install Pygments\nfrom pygments import highlight\nfrom pygments.lexers import get_lexer_by_name\nfrom pygments.formatters import CsvFormatter\n\n# Read the code file\nwith open(\"code.py\", \"r\") as file:\n    code = file.read()\n\n# Determine the lexer based on the file extension\nlexer = get_lexer_by_name(\"python\")\n\n# Define a custom formatter with a custom color scheme and line numbers\nformatter = CsvFormatter(style=\"autumn\", linenos=True)\n\n# Apply syntax highlighting to the code with the custom color scheme and line numbers\nhighlighted_code = highlight(code, lexer, formatter)\n\n# Save the highlighted code to a CSV file with the custom color scheme and line numbers\nwith open(\"highlighted_code.csv\", \"w\") as csv_file:\n    csv_file.write(highlighted_code)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'Pygments' API to apply syntax highlighting to a code file and save the highlighted code as a CSV file with a custom color scheme and line numbers.\n\n### Response:"
    },
    {
        "api": "Pygments",
        "decoder_input_ids": true,
        "ground-truth": "# !pip install Pygments\nfrom pygments import highlight\nfrom pygments.lexers import get_lexer_by_name\nfrom pygments.formatters import RtfFormatter\n\n# Read the code file\nwith open(\"code.py\", \"r\") as file:\n    code = file.read()\n\n# Determine the lexer based on the file extension\nlexer = get_lexer_by_name(\"python\")\n\n# Apply syntax highlighting to the code\nhighlighted_code = highlight(code, lexer, RtfFormatter())\n\n# Save the highlighted code to a RTF file\nwith open(\"highlighted_code.rtf\", \"w\") as rtf_file:\n    rtf_file.write(highlighted_code)",
        "instruction": "Create a Python program using the 'Pygments' API to apply syntax highlighting to a code file and save the highlighted code as a RTF file.",
        "prediction": ":!pip install Pygments\nfrom pygments import highlight\nfrom pygments.lexers import get_lexer_by_name\nfrom pygments.formatters import RtfFormatter\n\n# Read the code file\nwith open(\"code.py\", \"r\") as file:\n    code = file.read()\n\n# Determine the lexer based on the file extension\nlexer = get_lexer_by_name(\"python\")\n\n# Apply syntax highlighting to the code\nhighlighted_code = highlight(code, lexer, RtfFormatter())\n\n# Save the highlighted code to a RTF file\nwith open(\"highlighted_code.rtf\", \"w\") as rtf_file:\n    rtf_file.write(highlighted_code)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'Pygments' API to apply syntax highlighting to a code file and save the highlighted code as a RTF file.\n\n### Response:"
    },
    {
        "api": "SQLAlchemy",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install SQLAlchemy\nfrom sqlalchemy import create_engine, Column, Integer, String, Float\nfrom sqlalchemy.orm import sessionmaker, declarative_base\n\n# Create a MySQL database connection\nengine = create_engine('mysql://username:password@localhost/mydatabase')\n\n# Define the Employee class to represent the \"Employee\" entity\nBase = declarative_base()\n\nclass Employee(Base):\n    __tablename__ = 'employees'\n    id = Column(Integer, primary_key=True)\n    first_name = Column(String)\n    last_name = Column(String)\n    position = Column(String)\n    salary = Column(Float)\n\n# Create the table in the database\nBase.metadata.create_all(engine)\n\n# Function to add a new employee to the database\ndef add_employee(first_name, last_name, position, salary):\n    Session = sessionmaker(bind=engine)\n    session = Session()\n\n    employee = Employee(first_name=first_name, last_name=last_name, position=position, salary=salary)\n    session.add(employee)\n    session.commit()\n    session.close()\n\nadd_employee(\"John\", \"Smith\", \"Manager\", 60000.00)\n\nSession = sessionmaker(bind=engine)\nsession = Session()\nemployee = session.query(Employee).filter_by(first_name=\"John\").first()\nsession.close()\n\nprint(\"Employee data: \")\nprint(employee.first_name)\nprint(employee.last_name)\nprint(employee.position)\nprint(employee.salary)",
        "instruction": "Create a Python program that uses the 'SQLAlchemy' API to connect to a MySQL database. Define a 'Employee' entity with attributes like 'id,' 'first_name,' 'last_name,' 'position,' and 'salary.' The program should establish a connection to the MySQL database, create the 'employees' table and add a new employee. Then, retrieve employee details from the database.",
        "prediction": ":!pip install SQLAlchemy\nfrom sqlalchemy import create_engine, Column, Integer, String, Float\nfrom sqlalchemy.orm import sessionmaker, declarative_base\n\n# Create a MySQL database connection\nengine = create_engine('mysql://username:password@localhost/mydatabase')\n\n# Define the Employee class to represent the \"Employee\" entity\nBase = declarative_base()\n\nclass Employee(Base):\n    __tablename__ = 'employees'\n    id = Column(Integer, primary_key=True)\n    first_name = Column(String)\n    last_name = Column(String)\n    position = Column(String)\n    salary = Column(Float)\n\n# Create the table in the database\nBase.metadata.create_all(engine)\n\n# Function to add a new employee to the database\ndef add_employee(first_name, last_name, position, salary):\n    Session = sessionmaker(bind=engine)\n    session = Session()\n\n    employee = Employee(first_name=first_name, last_name=last_name, position=position, salary=salary)\n    session.add(employee)\n    session.commit()\n    session.close()\n\nadd_employee(\"John\", \"Smith\", \"Manager\", 60000.00)\n\nEmployee = Employee(first_name=\"John\", last_name=\"Smith\", position=\"Manager\", salary=60000.00)\n\nSession = sessionmaker(bind=engine)\nsession = Session()\nsession.add(Employee)\nsession.commit()\nsession.close()\n\nSession = sessionmaker(bind=engine)\nsession = Session()\nemployee = session.query(Employee).filter_by(first_name=\"John\").first()\nsession.close()\n\nSession = sessionmaker(bind=engine)\nsession = Session()\nemployee_details = {\n    \"first_name\": employee.first_name,\n    \"last_name\": employee.last_name,\n    \"position\": employee.position,\n    \"salary\": employee.salary\n}\nsession.close()\n\nprint(\"Employee data: \")\nprint(employee_details)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses the 'SQLAlchemy' API to connect to a MySQL database. Define a 'Employee' entity with attributes like 'id,' 'first_name,' 'last_name,' 'position,' and 'salary.' The program should establish a connection to the MySQL database, create the 'employees' table and add a new employee. Then, retrieve employee details from the database.\n\n### Response:"
    },
    {
        "api": "apeye",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install apeye\nimport apeye\n\nbase_url = \"https://example.com\"\n\nclient = apeye.URL(base_url)\n\ncookies = client.cookies\nuser_agent = client.user_agent\nreferer = client.referer\n\nprint(\"Cookies:\")\nprint(cookies)\n\nprint(\"\\nUser Agent:\")\nprint(user_agent)\n\nprint(\"\\nReferer:\")\nprint(referer)",
        "instruction": "Develop a Python program that utilizes the 'apeye' API to interact with a given URL. The program should extract and print the cookies, user agent, and referer information from the URL request.",
        "prediction": ":import apeye\nimport apeye\n\nbase_url = \"https://example.com\"\n\nclient = apeye.URL(base_url)\n\nprint(\"Cookies:\")\nfor cookie in client.cookies:\n    print(f\"\\t{cookie}\")\n\nprint(\"\\nReferer:\")\nreferer = client.referer\n\nif referer:\n    print(f\"Referer:\")\n    print(f\"\\t{referer}\")\n\nprint(\"\\nUser Agent:\")\nuser_agent = client.user_agent\n\nif user_agent:\n    print(f\"User Agent:\")\n    print(f\"\\t{user_agent}\")",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that utilizes the 'apeye' API to interact with a given URL. The program should extract and print the cookies, user agent, and referer information from the URL request.\n\n### Response:"
    },
    {
        "api": "apeye",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install apeye\nimport apeye\n\nbase_url = \"https://example.com\"\n\nclient = apeye.URL(base_url)\n\nresponse = client.get()\n\nprint(\"Status Code:\")\nprint(response.status_code)\n\nprint(\"\\nHeaders:\")\nprint(response.headers)\n\nprint(\"\\nContent:\")\nprint(response.content)\n\n# Save content to file\nwith open('output.txt', 'w') as file:\n    file.write(response.content)",
        "instruction": "Develop a Python program that utilizes the 'apeye' API to interact with a given URL. The program should extract and print the status code, headers, and content of the URL response. Additionally, the program should save the content of the response to a file named 'output.txt'.",
        "prediction": ":import apeye\nimport apeye\n\nbase_url = \"https://example.com\"\n\nclient = apeye.URL(base_url)\n\nresponse = client.get()\n\nprint(\"Status Code:\")\nprint(response.status_code)\n\nprint(\"\\nHeaders:\")\nprint(response.headers)\n\nprint(\"\\nContent:\")\nprint(response.content)\n\n# Save content to file\nwith open('output.txt', 'w') as file:\n    file.write(response.content)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that utilizes the 'apeye' API to interact with a given URL. The program should extract and print the status code, headers, and content of the URL response. Additionally, the program should save the content of the response to a file named 'output.txt'.\n\n### Response:"
    },
    {
        "api": "bitstring",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install bitstring\nfrom bitstring import BitArray\n\nbinary1 = input(\"Enter the first binary string: \")\nbinary2 = input(\"Enter the second binary string: \")\n\nbitarray1 = BitArray(bin=binary1)\nbitarray2 = BitArray(bin=binary2)\n\nresult = bitarray1 + bitarray2\n\nprint(\"Result of bitwise concatenation operation:\", result.bin)",
        "instruction": "Create a Python program using the 'bitstring' API to perform a bitwise concatenation operation on two binary strings. The program should take two binary strings as input and perform the bitwise concatenation operation on them. The program should then print the result of the bitwise concatenation operation.",
        "prediction": ":import bitstring\nbinary1 = \"01100\"\nbinary2 = \"10010\"\n\nbitstring  binary1 binary2\n\nprint(\"Result of bitwise concatenation operation:\", bitstring.concat(binary1, binary2))",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'bitstring' API to perform a bitwise concatenation operation on two binary strings. The program should take two binary strings as input and perform the bitwise concatenation operation on them. The program should then print the result of the bitwise concatenation operation.\n\n### Response:"
    },
    {
        "api": "category-encoders",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install category_encoders\nimport category_encoders as cat_encoder\nimport pandas as pd\n\n# creating the dictionary\ndictionary = {'OUTLOOK': ['Rainy', 'Rainy',\n                          'Overcast', 'Sunny',\n                          'Sunny', 'Sunny',\n                          'Overcast'],\n              'TEMPERATURE': ['Hot', 'Hot', 'Hot',\n                          'Mild', 'Cool',\n                          'Cool', 'Cool'],\n              'PLAY': ['No', 'No', 'Yes',\n                       'Yes', 'Yes', 'No',\n                       'Yes']}\n\n# converting the dictionary to DataFrame\ndf = pd.DataFrame(dictionary)\n\n# creating an object PolynomialEncoder\nencoder = cat_encoder.PolynomialEncoder(cols = ['OUTLOOK', 'TEMPERATURE'])\n\n# fitting the columns to a data frame\ndf_category_encoder = encoder.fit_transform(df[['OUTLOOK', 'TEMPERATURE']])\n\nprint(df_category_encoder)",
        "instruction": "Create a Python program using the 'category-encoders' API to demonstrate category encoding. The program should encode categorical data using polynomial encoding and print the resulting data frame.",
        "prediction": ":import category_encoders as cat_encoder\nimport category_encoders as cat_encoder\nimport pandas as pd\n\n# creating the dictionary\ndictionary = {'OUTLOOK': ['Rainy', 'Rainy',\n                          'Overcast', 'Sunny',\n                          'Sunny', 'Sunny',\n                          'Overcast'],\n              'TEMPERATURE': ['Hot', 'Poly', 'Hot',\n                          'Hot', 'Hot', 'Hot',\n                          'Hot'],\n              'PLAY': ['No', 'No', 'Yes',\n                       'Yes', 'Yes', 'No',\n                       'Yes']}\n\n# converting the dictionary to DataFrame\ndf = pd.DataFrame(dictionary)\n\n# creating an object POlynomialEncoder\nencoder = cat_encoder.PolynomialEncoder(cols = ['OUTLOOK', 'TEMPERATURE'])\n\n# fitting the columns to a data frame\ndf_category_encoder = encoder.fit_transform(df[['OUTLOOK', 'TEMPERATURE']], df['PLAY'])\n\nprint(df_category_encoder)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'category-encoders' API to demonstrate category encoding. The program should encode categorical data using polynomial encoding and print the resulting data frame.\n\n### Response:"
    },
    {
        "api": "category-encoders",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install category_encoders\nimport category_encoders as cat_encoder\nimport pandas as pd\n\n# creating the dictionary\ndictionary = {'OUTLOOK': ['Rainy', 'Rainy',\n                          'Overcast', 'Sunny',\n                          'Sunny', 'Sunny',\n                          'Overcast'],\n              'TEMPERATURE': ['Hot', 'Hot', 'Hot',\n                          'Mild', 'Cool',\n                          'Cool', 'Cool'],\n              'PLAY': ['No', 'No', 'Yes',\n                       'Yes', 'Yes', 'No',\n                       'Yes']}\n\n# converting the dictionary to DataFrame\ndf = pd.DataFrame(dictionary)\n\n# creating an object JamesSteinEncoder\nencoder = cat_encoder.JamesSteinEncoder(cols = ['OUTLOOK', 'TEMPERATURE'])\n\n# fitting the columns to a data frame\ndf_category_encoder = encoder.fit_transform(df[['OUTLOOK', 'TEMPERATURE']])\n\nprint(df_category_encoder)",
        "instruction": "Create a Python program using the 'category-encoders' API to demonstrate category encoding. The program should encode categorical data using James-Stein encoding and print the resulting data frame.",
        "prediction": ":import category_encoders\nimport category_encoders as cat_encoder\nimport pandas as pd\n\n# creating the dictionary\ndictionary = {'OUTLOOK': ['Rainy', 'Rainy',\n                          'Overcast', 'Sunny',\n                          'Sunny', 'Sunny',\n                          'Overcast'],\n              'TEMPERATURE': ['Hot', 'Hot', 'Hot',\n                          'Mild', 'Cool',\n                          'Cool', 'Cool'],\n              'PLAY': ['No', 'No', 'Yes',\n                       'Yes', 'Yes', 'No',\n                       'Yes']}\n\n# converting the dictionary to DataFrame\ndf = pd.DataFrame(dictionary)\n\n# creating an object JStoder\nencoder = cat_encoder.JamesSteinEncoder(cols = ['OUTLOOK', 'TEMPERATURE'])\n\n# fitting the columns to a data frame\ndf_category_encoder = encoder.fit_transform(df[['OUTLOOK', 'TEMPERATURE']])\n\nprint(df_category_encoder)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'category-encoders' API to demonstrate category encoding. The program should encode categorical data using James-Stein encoding and print the resulting data frame.\n\n### Response:"
    },
    {
        "api": "chardet",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install chardet\nimport chardet\n\nwith open('mixed_encodings.txt', 'r') as file:\n    for line in file:\n        result = chardet.detect(line.encode())\n        print(f\"Line: {line.strip()}\")\n        print(f\"Detected Encoding: {result['encoding']}\")",
        "instruction": "Develop a Python program that reads a text file containing mixed encodings and uses the 'chardet' API to detect the encoding of each line. The program should then print the encoding detection results for each line in the file.",
        "prediction": ":import chardet\nwith open('mixed_encodings', 'rb') as file:\n    rawdata = file.read()\n\nresult = chardet.detect(rawdata)\n\nfor i in rawdata:\n    utf = chardet.detect(i)\n\nprint(utf)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that reads a text file containing mixed encodings and uses the 'chardet' API to detect the encoding of each line. The program should then print the encoding detection results for each line in the file.\n\n### Response:"
    },
    {
        "api": "chardet",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install chardet\nimport chardet\nimport json\n\nwith open('data.json', 'r') as jsonfile:\n    data = json.load(jsonfile)\n\ndetected_data = {}\nfor key, value in data.items():\n    result = chardet.detect(value.encode())\n    encoding = result['encoding']\n    detected_data[key] = value.encode(encoding).decode(encoding)\n\nwith open('detected_data.json', 'w') as output_file:\n    json.dump(detected_data, output_file, ensure_ascii=False)",
        "instruction": "Develop a Python program that reads a JSON file with text data in various encodings, uses the 'chardet' API to detect the encoding of each value, and then saves the JSON data with the detected encodings to a new file.",
        "prediction": ":import chardet\nimport json\n\nwith open('data.json', 'r', encoding=chardet.detect(json.dviron)['encoding']) as json_file:\n    data = json.load(json_file)\n\nwith open('new_data.json', 'w', encoding=chardet.detect(json.dviron)['encoding']) as new_file:\n    json.dump(data, new_file)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that reads a JSON file with text data in various encodings, uses the 'chardet' API to detect the encoding of each value, and then saves the JSON data with the detected encodings to a new file.\n\n### Response:"
    },
    {
        "api": "chardet",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install chardet\nfrom chardet.universaldetector import UniversalDetector\n\ntext = \"Here is a text with numbers 22 and special charcaters ##%&\"\ntext = text.encode(encoding='ascii',errors='strict')\n\ndetector = UniversalDetector()\ndetector.feed(text)\ndetector.close()\n\nprint(detector.result)",
        "instruction": "Develop a Python program that uses the 'chardet' API to detect the encoding of a given text. The program should encode the text in ASCII and use the detector to identify the encoding. Print the result of the encoding detection.",
        "prediction": ":import chardet\nimport chardet\n\nencode_text = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxy",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that uses the 'chardet' API to detect the encoding of a given text. The program should encode the text in ASCII and use the detector to identify the encoding. Print the result of the encoding detection.\n\n### Response:"
    },
    {
        "api": "click",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install click\nimport click\n\n@click.command()\n@click.option('--number1', prompt='Enter the first number: ',\n              help='First number.')\n@click.option('--number2', prompt='Enter the second number: ',\n              help='Second number.')\ndef main(number1, number2):\n  number1 = int(number1)\n  number2 = int(number2)\n  print(\"The sum is:\", number1 + number2)\n\nif __name__ == '__main__':\n    main()",
        "instruction": "Create a Python program using the 'click' API to build a command-line tool. The program should accept two input options: 'number1' and 'number2'. It should then calculate the sum of 'number1' and 'number2' and print the result.",
        "prediction": ":import click\n\n# Define a custom class.\nclass Sum(click.core.Option\n       , click.core.MultiOption\n       , click.core.TupleOption\n        ):\n    \n    def handle_sum(cls, sum):\n        sum1, sum2 = sum\n        sum = sum1 + sum2\n        return sum\n\n# Define a custom sum of 'number1' and 'number2'.\n@click.command()\n@click.option(\"-n1\", \"--number1\")\n@click.option(\"-n2\", \"--number2\")\n@click.option(\"-s\", \"--sum\", type=Sum)\ndef main(number1, number2, sum):\n    if sum:\n        sum = sum.handle_sum(sum)\n    return sum\n\n# Display the result.\nprint(\"Result:\", sum)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'click' API to build a command-line tool. The program should accept two input options: 'number1' and 'number2'. It should then calculate the sum of 'number1' and 'number2' and print the result.\n\n### Response:"
    },
    {
        "api": "datacompy",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install datacompy\nfrom io import StringIO\nimport pandas as pd\nimport datacompy\n\ndata1 = \"\"\"employee_id, name\n1, islam mesabah\n\"\"\"\n\ndata2 = \"\"\"employee_id, name\n1, islam mesabah\n\"\"\"\n\ndf1 = pd.read_csv(StringIO(data1))\ndf2 = pd.read_csv(StringIO(data2))\n\ncompare = datacompy.Compare(\n  df1,\n  df2,\n  # You can also specify a list\n  # of columns\n  join_columns = 'employee_id',\n\n  # Optional, defaults to 'df1'\n  df1_name = 'Original',\n\n  # Optional, defaults to 'df2'\n  df2_name = 'New'\n  )\ncompare.matches(ignore_extra_columns = False)\nprint(compare.report())",
        "instruction": "Develop a Python program that utilizes the 'datacompy' API to compare two dataframes for data matching. The program should load two dataframes, compare them based on the 'employee_id' column, and produce a comparison report. Ensure that it reports matches and does not ignore extra columns.",
        "prediction": ":import datacompy\n\nfrom datacompy import DataCom\ufffd\n\n# Load the dataframes\ndf11 = datacompy.get_random_data1(size=1000)\ndf21 = datacompy.get_random_data2(size=1000)\n\n# Load the dataframes\ndf1 = datacompy.get_random_data(size=1000)\ndf2 = datacompy.get_random_data(size=1000)\n\n# Get the data matching data\ndf1_1, df2_1 = datacompy.get_matching_data(df1, df2)\n\n# Get the report\ndf_data, df_data_report = datacompy.get_report(\n    df_1, df_2, extra_columns_1, extra_columns_2\n)\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that utilizes the 'datacompy' API to compare two dataframes for data matching. The program should load two dataframes, compare them based on the 'employee_id' column, and produce a comparison report. Ensure that it reports matches and does not ignore extra columns.\n\n### Response:"
    },
    {
        "api": "datacompy",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install datacompy\nfrom io import StringIO\nimport pandas as pd\nimport datacompy\n\ndata1 = \"\"\"employee_id, name, department\n1, islam mesabah, IT\n2, john doe, HR\n\"\"\"\n\ndata2 = \"\"\"employee_id, name, department\n1, islam mesabah, IT\n2, john doe, HR\n\"\"\"\n\ndf1 = pd.read_csv(StringIO(data1))\ndf2 = pd.read_csv(StringIO(data2))\n\ncompare = datacompy.Compare(\n  df1,\n  df2,\n  # You can also specify a list\n  # of columns\n  join_columns = ['employee_id', 'department'],\n\n  # Optional, defaults to 'df1'\n  df1_name = 'Original',\n\n  # Optional, defaults to 'df2'\n  df2_name = 'New'\n  )\ncompare.matches(ignore_extra_columns = True)\nprint(compare.report())",
        "instruction": "Develop a Python program that utilizes the 'datacompy' API to compare two dataframes for data matching. The program should load two dataframes, compare them based on multiple columns ('employee_id' and 'department'), and produce a comparison report. Ensure that it reports matches and ignores extra columns.",
        "prediction": ":import datacompy\n\nfrom datacompy import DataCom\ufffd\n\n# Load the dataframes\ndf1 = datacompy.import_from_file(1,'sample_data_1.xlsx')\ndf2 = datacompy.import_from_file(2,'sample_data_2.xlsx')\n\n# Extract the columns to compare\ncolumn_to_match = ['employee_id', 'department']\n\n# Create the comparison report\nreturn datacompy.CompareData(df1, df2, extra_columns1='column_1', extra_columns2='column_2')\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that utilizes the 'datacompy' API to compare two dataframes for data matching. The program should load two dataframes, compare them based on multiple columns ('employee_id' and 'department'), and produce a comparison report. Ensure that it reports matches and ignores extra columns.\n\n### Response:"
    },
    {
        "api": "datacompy",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install datacompy\nfrom io import StringIO\nimport pandas as pd\nimport datacompy\n\ndata1 = \"\"\"employee_id, name, age\n1, islam mesabah, 25\n2, john doe, 30\n\"\"\"\n\ndata2 = \"\"\"employee_id, name, age\n1, islam mesabah, 25\n2, john doe, 30\n\"\"\"\n\ndf1 = pd.read_csv(StringIO(data1))\ndf2 = pd.read_csv(StringIO(data2))\n\ncompare = datacompy.Compare(\n  df1,\n  df2,\n  # You can also specify a list\n  # of columns\n  join_columns = 'employee_id',\n\n  # Optional, defaults to 'df1'\n  df1_name = 'Original',\n\n  # Optional, defaults to 'df2'\n  df2_name = 'New'\n  )\ncompare.matches(ignore_extra_columns = True)\nprint(compare.report())",
        "instruction": "Develop a Python program that utilizes the 'datacompy' API to compare two dataframes for data matching. The program should load two dataframes, compare them based on a specific column ('employee_id'), and produce a comparison report. Ensure that it reports matches and ignores extra columns.",
        "prediction": ":import datacompy\n\nfrom datacompy import datacomp\ufffd, diff\n\n# Load the dataframes\ndf11 = datacompy.import_from_1_file(\n    ipath1=\"\",\n    ipath2=\"\")\n\ndf21 = datacompy.import_from_1_file(\n    ipath1=\"\",\n    ipath2=\"\")\n\n# Load the dataframes\ndatacompy.comparison_report(\n    ipestimate_1_df1,\n    ipestimate_2_df1)\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that utilizes the 'datacompy' API to compare two dataframes for data matching. The program should load two dataframes, compare them based on a specific column ('employee_id'), and produce a comparison report. Ensure that it reports matches and ignores extra columns.\n\n### Response:"
    },
    {
        "api": "datacompy",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install datacompy\nfrom io import StringIO\nimport pandas as pd\nimport datacompy\n\ndata1 = \"\"\"employee_id, name, age\n1, islam mesabah, 25\n2, john doe, 30\n\"\"\"\n\ndata2 = \"\"\"employee_id, name, age\n1, islam mesabah, 25\n2, john doe, 30\n\"\"\"\n\ndf1 = pd.read_csv(StringIO(data1))\ndf2 = pd.read_csv(StringIO(data2))\n\ncompare = datacompy.Compare(\n  df1,\n  df2,\n  # You can also specify a list\n  # of columns\n  join_columns = 'employee_id',\n\n  # Optional, defaults to 'df1'\n  df1_name = 'Original',\n\n  # Optional, defaults to 'df2'\n  df2_name = 'New'\n  )\ncompare.matches(ignore_extra_columns = False)\nprint(compare.report())",
        "instruction": "Develop a Python program that utilizes the 'datacompy' API to compare two dataframes for data matching. The program should load two dataframes, compare them based on a specific column ('employee_id'), and produce a comparison report. Ensure that it reports matches and includes extra columns in the comparison.",
        "prediction": ":import datacompy\n\nfrom datacompy import DataSource\n\n# Load the two dataframes\n\ndata1 = pd.read_csv('employee_data.csv')\ndata2 = pd.read_csv('employee_data_new.csv')\n\n# Compare the dataframes based on a specific column\n\nreport = datacompy.Compare(1)\n\nextra_columns = ['employee_id']\nreport.columns_mismatch)\n\n# Extra columns in the comparison report:.columns_mismatch)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that utilizes the 'datacompy' API to compare two dataframes for data matching. The program should load two dataframes, compare them based on a specific column ('employee_id'), and produce a comparison report. Ensure that it reports matches and includes extra columns in the comparison.\n\n### Response:"
    },
    {
        "api": "datacompy",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install datacompy\nfrom io import StringIO\nimport pandas as pd\nimport datacompy\n\ndata1 = \"\"\"employee_id, name, department\n1, islam mesabah, IT\n2, john doe, HR\n\"\"\"\n\ndata2 = \"\"\"employee_id, name, department\n1, islam mesabah, IT\n2, john doe, HR\n\"\"\"\n\ndf1 = pd.read_csv(StringIO(data1))\ndf2 = pd.read_csv(StringIO(data2))\n\ncompare = datacompy.Compare(\n  df1,\n  df2,\n  # You can also specify a list\n  # of columns\n  join_columns = ['employee_id', 'department'],\n\n  # Optional, defaults to 'df1'\n  df1_name = 'Original',\n\n  # Optional, defaults to 'df2'\n  df2_name = 'New'\n  )\ncompare.matches(ignore_extra_columns = False)\nprint(compare.report())",
        "instruction": "Develop a Python program that utilizes the 'datacompy' API to compare two dataframes for data matching. The program should load two dataframes, compare them based on multiple columns ('employee_id' and 'department'), and produce a comparison report. Ensure that it reports matches and does not ignore extra columns.",
        "prediction": ":import datacompy\nimport datacompy\n\n# Load the dataframes\ndf1 = datacompy.read_file(file_path='example_data.1.csv')\ndf2 = datacompy.read_file(file_path='example_data.2.csv')\n\n# Load the columns to compare\ncolumn_1 = 'employee_id'\ncolumn_2 = 'department'\n\n# Create the comparison report\nreturn datacompy.return_report(df1, df2, extra_columns=extra_columns)\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that utilizes the 'datacompy' API to compare two dataframes for data matching. The program should load two dataframes, compare them based on multiple columns ('employee_id' and 'department'), and produce a comparison report. Ensure that it reports matches and does not ignore extra columns.\n\n### Response:"
    },
    {
        "api": "datacompy",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install datacompy\nfrom io import StringIO\nimport pandas as pd\nimport datacompy\n\ndata1 = \"\"\"employee_id, name, age\n1, islam mesabah, 25\n2, john doe, 30\n\"\"\"\n\ndata2 = \"\"\"employee_id, name, age\n1, islam mesabah, 25\n2, john doe, 30\n\"\"\"\n\ndf1 = pd.read_csv(StringIO(data1))\ndf2 = pd.read_csv(StringIO(data2))\n\ncompare = datacompy.Compare(\n  df1,\n  df2,\n  # You can also specify a list\n  # of columns\n  join_columns = 'employee_id',\n\n  # Optional, defaults to 'df1'\n  df1_name = 'Original',\n\n  # Optional, defaults to 'df2'\n  df2_name = 'New'\n  )\ncompare.matches(ignore_extra_columns = False)\nprint(compare.report())",
        "instruction": "Develop a Python program that utilizes the 'datacompy' API to compare two dataframes for data matching. The program should load two dataframes, compare them based on a specific column ('employee_id'), and produce a comparison report. Ensure that it reports matches and does not ignore extra columns.",
        "prediction": ":import datacompy\n\nfrom datacompy import DataReader\n\n# Load the two dataframes\ndf111 = DataReader(file_11)\ndf11 = DataReader(file_2)\n\n# Compare the dataframes based on a specific column\ndf1 = datacompy.Compare\ufffd.import_from_dict(\n    columns_1, dataframe_1, dataframe_2\n)\n\n# Ensure matches and does not ignore extra columns\ndf1 = datacompy.Compare(on extra columns)\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that utilizes the 'datacompy' API to compare two dataframes for data matching. The program should load two dataframes, compare them based on a specific column ('employee_id'), and produce a comparison report. Ensure that it reports matches and does not ignore extra columns.\n\n### Response:"
    },
    {
        "api": "datacompy",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install datacompy\nfrom io import StringIO\nimport pandas as pd\nimport datacompy\n\ndata1 = \"\"\"employee_id, name, department\n1, islam mesabah, IT\n2, john doe, HR\n\"\"\"\n\ndata2 = \"\"\"employee_id, name, department\n1, islam mesabah, IT\n2, john doe, HR\n\"\"\"\n\ndf1 = pd.read_csv(StringIO(data1))\ndf2 = pd.read_csv(StringIO(data2))\n\ncompare = datacompy.Compare(\n  df1,\n  df2,\n  # You can also specify a list\n  # of columns\n  join_columns = ['employee_id', 'department'],\n\n  # Optional, defaults to 'df1'\n  df1_name = 'Original',\n\n  # Optional, defaults to 'df2'\n  df2_name = 'New'\n  )\ncompare.matches(ignore_extra_columns = False)\nprint(compare.report())",
        "instruction": "Develop a Python program that utilizes the 'datacompy' API to compare two dataframes for data matching. The program should load two dataframes, compare them based on multiple columns ('employee_id' and 'department'), and produce a comparison report. Ensure that it reports matches and includes extra columns in the comparison.",
        "prediction": ":import datacompy\n\n# Create a dictionary of columns to match\ndf1_columns = ['employee_id', 'department']\n\n# Create a data frame from first\ufffd\ndataframe1 = datacompy.to_example_dataframe(\n    1,'sample_data_1.1.json'\n)\n\n# Create a data frame from second\ndataframe2 = datacompy.to_example_dataframe(\n    2,'sample_data_1.2.json'\n)\n\n# Match columns\nmatching_data_frames = datacompy.match_column_by_efective_column(\n    dataframe1, dataframe2, df1_columns\n)\n\n# Extra columns in 1 or the other dataframe\nextra_columns_dataframe1 = datacompy.get_columns_extra_dataframe(\n    dataframe1, dataframe2\n)\n\n# Extra columns in 1 or the other dataframe\nextra_columns_dataframe2 = datacompy.get_columns_extra_dataframe(\n    dataframe2, dataframe1\n)\n\n# Extra columns\nextra_columns = list(set(extra_columns_dataframe1).union(extra_columns_dataframe2))\n\n# Extra columns report\nprint(datacompy.Mental_Report())\n\n# Print MATCHES and includes extra columns in the comparison\nprint(datacompy.Mental_Report(MatchedVres=matching_data_frames))\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that utilizes the 'datacompy' API to compare two dataframes for data matching. The program should load two dataframes, compare them based on multiple columns ('employee_id' and 'department'), and produce a comparison report. Ensure that it reports matches and includes extra columns in the comparison.\n\n### Response:"
    },
    {
        "api": "datasets",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install datasets\nfrom datasets import load_dataset\n\n# Load SNLI dataset\ndataset = load_dataset(\"snli\")\n\n# Get the training genres\ntrain_genres = dataset[\"train\"][\"genre\"]\n\n# Count unique genre labels\nunique_genres = set(train_genres)\n\nprint(\"Number of unique genres in the SNLI training set:\", len(unique_genres))",
        "instruction": "Develop a Python program using the 'datasets' API to load the SNLI dataset and count the number of unique genres in the training set. The program should load the SNLI dataset, access the training genres, and count the unique genre labels.",
        "prediction": ":import datasets\n\n# Load SNLI dataset\ndataset = Dataset(\"snli\")\n\n# Get the training genres\ntrain_genres = dataset[\"train\"][\"genre\"]\n\n# Count unique genre labels\nunique_genres = set(train_genres)\n\nprint(\"Number of unique genres in the SNLI training set:\", len(unique_genres))",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program using the 'datasets' API to load the SNLI dataset and count the number of unique genres in the training set. The program should load the SNLI dataset, access the training genres, and count the unique genre labels.\n\n### Response:"
    },
    {
        "api": "datasets",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install datasets\nfrom datasets import load_dataset\nimport random\n\n# Load SAMSum dataset\ndataset = load_dataset(\"samsum\")\n\n# Select a random conversation\nrandom_conversation = random.choice(dataset[\"train\"][\"dialog\"])\n\nprint(\"Random Conversation:\")\nfor message in random_conversation:\n    print(message)",
        "instruction": "Develop a Python program using the 'datasets' API to load the SAMSum dataset and extract a random conversation. The program should load the SAMSum dataset, select a random conversation, and print its content.",
        "prediction": ":import datasets\nfrom datasets import load_dataset\nimport random\n\n# Load SAMSum dataset\ndataset = load_dataset(\"SAMSum\")\n\n# Select a random conversation\nrandom_conv = random.choice(dataset[\"train\"][\"dataset\"])\n\nprint(\"Conversation:\")\nprint(random_conv)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program using the 'datasets' API to load the SAMSum dataset and extract a random conversation. The program should load the SAMSum dataset, select a random conversation, and print its content.\n\n### Response:"
    },
    {
        "api": "datasets",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install datasets\nfrom datasets import load_dataset\nimport random\n\n# Load WikiText-103 dataset\ndataset = load_dataset(\"wikitext\", \"103\")\n\n# Select a random article\nrandom_article = random.choice(dataset[\"train\"][\"text\"])\n\nprint(\"Random Article:\")\nprint(random_article)",
        "instruction": "Develop a Python program using the 'datasets' API to load the WikiText-103 dataset and extract a random article. The program should load the WikiText-103 dataset, select a random article, and print its content.",
        "prediction": ":import datasets\nfrom datasets import load_dataset\nimport random\n\n# Load WikiText-103 dataset\ndataset = load_dataset(\"wikitext\", \"2-wikitext-103\")\n\n# Select a random article\nrandom_article = random.choice(dataset[\"train\"][\"text\"])\n\nprint(\"Random Article:\")\nprint(random_article)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program using the 'datasets' API to load the WikiText-103 dataset and extract a random article. The program should load the WikiText-103 dataset, select a random article, and print its content.\n\n### Response:"
    },
    {
        "api": "datasets",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install datasets\nfrom datasets import load_dataset\nimport random\n\n# Load TED MultiTranslation dataset\ndataset = load_dataset(\"ted_multi\")\n\n# Select a random translated speech\nrandom_speech = random.choice(dataset[\"train\"][\"translation\"])\n\nsource_language = random_speech[\"en\"]\ntarget_language = random_speech[\"fr\"]\n\nprint(f\"Source Transcript (English): {source_language}\")\nprint(f\"Target Transcript (French): {target_language}\")",
        "instruction": "Develop a Python program using the 'datasets' API to load the TED MultiTranslation dataset and retrieve a random translated speech. The program should load the TED MultiTranslation dataset, select a random translated speech, and print the source and target language transcripts.",
        "prediction": ":import datasets\nfrom datasets import load_dataset\nimport random\n\n# Load TED MultiTranslation dataset\ndataset = load_dataset(\"ted_multi_translation\")\n\n# Select a random translated speech\nrandom_translation = random.choice(dataset[\"train\"][\"translation\"])\n\n# Get source and target language transcripts\nsource_text = random_translation[\"translation_text\"]\ntarget_text = random_translation[\"translation_text\"]\n\nprint(\"Source Translations (Source Language)\")\nprint(source_text)\n\nprint(\"Target Translations (Target Language)\")\nprint(target_text)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program using the 'datasets' API to load the TED MultiTranslation dataset and retrieve a random translated speech. The program should load the TED MultiTranslation dataset, select a random translated speech, and print the source and target language transcripts.\n\n### Response:"
    },
    {
        "api": "diffusers",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install diffusers\nimport torch\nfrom diffusers import StableDiffusionPipeline\n\npipe = StableDiffusionPipeline.from_pretrained(\n    \"CompVis/stable-diffusion-v1-3-diffusers\",\n    use_auth_token=True,\n    revision=\"fp16\",\n    torch_dtype=torch.float16\n)\npipe = pipe.to(\"cpu\")\n\nprompt = \"What are the benefits of reading books?\"\ncompletions = pipe(prompt)[\"sample\"][0]\n\nprint(completions)",
        "instruction": "Write a Python program that utilizes the 'diffusers' API to generate a list of possible completions for the provided prompt, 'What are the benefits of reading books?'",
        "prediction": ":import torch\nimport diffusers\n\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\n\npipe = pipe.ComputePipeline()\n\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe =",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that utilizes the 'diffusers' API to generate a list of possible completions for the provided prompt, 'What are the benefits of reading books?'\n\n### Response:"
    },
    {
        "api": "diffusers",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install diffusers\nimport torch\nfrom diffusers import StableDiffusionPipeline\n\npipe = StableDiffusionPipeline.from_pretrained(\n    \"CompVis/stable-diffusion-v1-3-diffusers\",\n    use_auth_token=True,\n    revision=\"fp16\",\n    torch_dtype=torch.float16\n)\npipe = pipe.to(\"cpu\")\n\nprompt = \"What are the benefits of regular exercise?\"\ncompletions = pipe(prompt)[\"sample\"][0]\n\nprint(completions)",
        "instruction": "Write a Python program that utilizes the 'diffusers' API to generate a list of possible completions for the provided prompt, 'What are the benefits of regular exercise?'",
        "prediction": ":import torch\nimport diffusers\n\npipe = pipe\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\n\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\n\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\n\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePipeline()\npipe = pipe.ComputePip",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that utilizes the 'diffusers' API to generate a list of possible completions for the provided prompt, 'What are the benefits of regular exercise?'\n\n### Response:"
    },
    {
        "api": "emoji",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install emoji\nimport emoji\n\ndef has_emoji_code(txt, codes):\n  for char in txt:\n    for code in codes:\n      if emoji.demojize(char) == code:\n        return True\n  return False\n\ntxts = [\"I am so happy \ud83d\ude00\", \n          \"Python is :thumbs_up:\", \n          \"Funny \ud83d\ude02\", \n          \"I liked it :red_heart:\",\n          \"I am so happy\",\n          \"This is a normal text\"]\n\ncodes_to_check = [\":thumbs_up:\", \":red_heart:\", \":smile:\"]\n\nfor txt in txts:\n  print(has_emoji_code(txt, codes_to_check))\n",
        "instruction": "Create a Python program that uses the 'emoji' API to check if a given text contains any specific emoji codes. The program should take a text and a list of emoji codes as input and return True if the text contains any emojis that match the specified codes, and False otherwise. Run the program on a list of sample texts containing emojis and non-emojis, and specify a list of emoji codes to check for each text.",
        "prediction": ":import emoji\nimport emoji\n\ndef has_emoji_code(txt):\n  for char in txt:\n    for char_code in emoji.EMOJI_DATA:\n      if char_code in char:\n        return True\n  return False\n\ntxts = [\"I am so happy \ud83d\ude00\", \n          \"Python is :thumbs_up:\", \n          \"Funny \ud83d\ude02\", \n          \"I liked it :red_heart:\",\n          \"I am so happy\",\n          \"This is a normal text\"]\n\ncodes_to_check = [\":thumbs_up:\", \":red_heart:\", \":smile:\"]\n\nfor txt in txts:\n  print(has_emoji_code(txt))\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses the 'emoji' API to check if a given text contains any specific emoji codes. The program should take a text and a list of emoji codes as input and return True if the text contains any emojis that match the specified codes, and False otherwise. Run the program on a list of sample texts containing emojis and non-emojis, and specify a list of emoji codes to check for each text.\n\n### Response:"
    },
    {
        "api": "emoji",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install emoji\nimport emoji\n\ndef has_emoji_name(txt, names):\n  for char in txt:\n    for name in names:\n      if emoji.demojize(char).lower().find(name.lower()) != -1:\n        return True\n  return False\n\ntxts = [\"I am so happy \ud83d\ude00\", \n          \"Python is :thumbs_up:\", \n          \"Funny \ud83d\ude02\", \n          \"I liked it :red_heart:\",\n          \"I am so happy\",\n          \"This is a normal text\"]\n\nnames_to_check = [\"happy\", \"thumbs\", \"red\"]\n\nfor txt in txts:\n  print(has_emoji_name(txt, names_to_check))\n",
        "instruction": "Create a Python program that uses the 'emoji' API to check if a given text contains any specific emoji names. The program should take a text and a list of emoji names as input and return True if the text contains any emojis that match the specified names, and False otherwise. Run the program on a list of sample texts containing emojis and non-emojis, and specify a list of emoji names to check for each text.",
        "prediction": ":import emoji\nimport emoji\n\ndef has_emoji_names(txt, names):\n  for char in txt:\n    if emoji.demojize(char) in names:\n      return True\n  return False\n\ntxts = [\"I am so happy \ud83d\ude00\", \n          \"Python is :thumbs_up:\", \n          \"Funny \ud83d\ude02\", \n          \"I liked it :red_heart:\",\n          \"I am so happy\",\n          \"This is a normal text\"]\n\nnames_to_check = [\"happy\", \"thumbs\", \"red\"]\n\nfor txt in txts:\n  print(has_emoji_names(txt, names_to_check))\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses the 'emoji' API to check if a given text contains any specific emoji names. The program should take a text and a list of emoji names as input and return True if the text contains any emojis that match the specified names, and False otherwise. Run the program on a list of sample texts containing emojis and non-emojis, and specify a list of emoji names to check for each text.\n\n### Response:"
    },
    {
        "api": "evaluate",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install datasets\n#!pip install evaluate\nfrom datasets import load_dataset\nfrom evaluate import evaluator\n\ndata = load_dataset(\"imdb\", split=\"test\").shuffle(seed=42).select(range(1000))\ntask_evaluator = evaluator(\"text-classification\")\n\n# Pass a model name or path\neval_results = task_evaluator.compute(\n    model_or_pipeline=\"lvwerra/distilbert-imdb\",\n    data=data,\n    label_mapping={\"NEGATIVE\": 0, \"POSITIVE\": 1}\n)\n\nprint(eval_results)",
        "instruction": "Create a Python program that uses the 'evaluate' API to perform sentiment analysis on a dataset. The program should load the IMDb dataset, shuffle it, select the first 1000 examples, and then use the 'lvwerra/distilbert-imdb' model to classify the text as either 'NEGATIVE' or 'POSITIVE.' The results should be printed.",
        "prediction": ":import numpy as np\nfrom evaluate import evaluator\nfrom transformers import AutoTokenizer, AutoModelForSequenceClassification\n\n# Load IMDb dataset\ndataset = dataset.shuffle(1000)\n\n# Select the first 1000 examples\ndataset = dataset.select(range(1000))\n\n# Create evaluator\nmodel = \"lvwerra/distilbert-imdb\"\nevaluator = evaluator(\"text\", model)\n\n# Perform sentiment analysis and calculate the F1 score\nresults = print(evaluator.compute(model, dataset, show_progress_bar=True))\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses the 'evaluate' API to perform sentiment analysis on a dataset. The program should load the IMDb dataset, shuffle it, select the first 1000 examples, and then use the 'lvwerra/distilbert-imdb' model to classify the text as either 'NEGATIVE' or 'POSITIVE.' The results should be printed.\n\n### Response:"
    },
    {
        "api": "evaluate",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install evaluate\nfrom evaluate import evaluator\n\n# Load the text summarization model\nsummarization_model = \"facebook/bart-large-cnn\"\n\ndef perform_summarization(text):\n    summarization_evaluator = evaluator(\"text-summarization\")\n\n    # Use the model for text summarization\n    summary = summarization_evaluator.compute(\n        model_or_pipeline=summarization_model,\n        data=text\n    )\n\n    return summary\n\n# User input\nuser_text = input(\"Enter the text for summarization: \")\nresult = perform_summarization(user_text)\n\nprint(\"Summarized Text:\")\nprint(result[0][\"summary_text\"])\n",
        "instruction": "Create a Python program that uses the 'evaluate' API to perform text summarization on a given text. The program should take a text as input, use the 'facebook/bart-large-cnn' model for text summarization, and print the summarized text.",
        "prediction": ":import evaluate\nfrom evaluate import evaluator\nfrom transformers import pipeline\n\n# Load the text summarization model\nsummarization_evaluator = \"facebook/bart-large-cnn\"\nsummarization_summarizer = \"facebook/bart-large-cnn\"\n\ndef perform_summarization(text):\n    summarization_evaluator = \"facebook/bart-large-cnn\"\n    summarization_summarizer = \"facebook/bart-large-cnn\"\n    summarization_evaluator = pipeline(\"summarization\")\n    summarized_text = summarization_evaluator(text, model=summarization_summarizer)\n    return summarized_text\n\n# Input the text for summarization\nuser_text = input(\"Enter the text for summarization: \")\nresult = perform_summarization(user_text)\n\nprint(\"Summarized Text:\")\nprint(result[0][\"summary_text\"])\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses the 'evaluate' API to perform text summarization on a given text. The program should take a text as input, use the 'facebook/bart-large-cnn' model for text summarization, and print the summarized text.\n\n### Response:"
    },
    {
        "api": "evaluate",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install evaluate\nfrom evaluate import evaluator\n\n# Load the text summarization model\nsummarization_model = \"facebook/bart-large-cnn\"\n\ndef perform_summarization(text):\n    summarization_evaluator = evaluator(\"text-summarization\")\n\n    # Use the model for text summarization\n    summary = summarization_evaluator.compute(\n        model_or_pipeline=summarization_model,\n        data=text\n    )\n\n    return summary\n\n# User input\nuser_text = input(\"Enter the text for summarization: \")\nresult = perform_summarization(user_text)\n\nprint(\"Summarized Text:\")\nprint(result[0][\"summary_text\"])\n",
        "instruction": "Create a Python program that uses the 'evaluate' API to perform text summarization on a given text. The program should allow the user to input a text, then use the 'facebook/bart-large-cnn' model for text summarization and print the summarized text.",
        "prediction": ":import evaluate\nfrom evaluate import evaluator\n\n# Load the model\nsummarization_model = \"facebook/bart-large-cnn\"\n\ndef perform_summarization(text):\n    summarization_evaluator = evaluator(\"text-summarization\")\n\n    # Use the model for text summarization\n    summary = summarization_evaluator.compute(\n        model_or_pipeline=summarization_model,\n        data=text\n    )\n\n    return summary\n\n# User input\nuser_text = input(\"Enter the text for summarization: \")\nresult = perform_summarization(user_text)\n\nprint(\"Summarized Text:\")\nprint(result[0][\"summary_text\"])\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses the 'evaluate' API to perform text summarization on a given text. The program should allow the user to input a text, then use the 'facebook/bart-large-cnn' model for text summarization and print the summarized text.\n\n### Response:"
    },
    {
        "api": "gymnasium",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install ale_py gymnasium\n#!pip install swig\n#!pip install gymnasium[box2d]\n#!pip install gymnasium[classic-control]\nimport gymnasium as gym\nfrom gymnasium.utils import play\n\nenv = gym.make(\"Taxi-v3\")\n\nmapping = {\"w\": 0,\n            \"a\": 3,\n            \"s\": 2,\n            \"d\": 1}\n\ndefault_action = 0\nplay.play(env, keys_to_action=mapping, noop=default_action)",
        "instruction": "Develop a Python program using the 'gymnasium' API to play the 'Taxi-v3' environment. The program should control the taxi within the environment using keyboard inputs (W, A, S, D) to move up, left, down, and right, respectively.",
        "prediction": ":import ale_py gymnasium\n#!pip install swig\n#!pip install gymnasium[box2d]\n#!pip install gymnasium[classic-control]\nimport gymnasium as gym\nfrom gymnasium.utils import play\n\nenv = gym.make(\"Taxi-v3\")\n\nmapping = {\"w\": 0,\n            \"a\": 3,\n            \"s\": 2,\n            \"d\": 1}\n\ndefault_action = 0\nplay.play(env, keys_to_action=mapping, noop=default_action)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program using the 'gymnasium' API to play the 'Taxi-v3' environment. The program should control the taxi within the environment using keyboard inputs (W, A, S, D) to move up, left, down, and right, respectively.\n\n### Response:"
    },
    {
        "api": "gymnasium",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install ale_py gymnasium\n#!pip install swig\n#!pip install gymnasium[box2d]\n#!pip install gymnasium[classic-control]\nimport gymnasium as gym\n\nenv = gym.make(\"RoboschoolInvertedPendulum-v1\")\n\ndone = False\nwhile not done:\n    action = env.action_space.sample()\n    observation, reward, done, info = env.step(action)\n    print(\"Action:\", action)\n    print(\"Observation:\", observation)\n    print(\"Reward:\", reward)\n    print(\"Done:\", done)\n    print(\"Info:\", info)",
        "instruction": "Develop a Python program using the 'gymnasium' API to play the 'RoboschoolInvertedPendulum-v1' environment. The program should control the inverted pendulum within the environment using continuous actions to apply torque to the joint.",
        "prediction": ":import gymnasium\n#!pip install swig\n#!pip install gymnasium[box2d]\n#!pip install gymnasium[classic-control]\nimport gymnasium as gym\n\nenv = gym.make(\"RoboschoolInvertedPendulum-v1\")\n\ndone = False\nwhile not done:\n    action = env.action_space.sample()\n    observation, reward, done, info = env.step(action)\n    print(\"Action:\", action)\n    print(\"Observation:\", observation)\n    print(\"Reward:\", reward)\n    print(\"Done:\", done)\n    print(\"Info:\", info)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program using the 'gymnasium' API to play the 'RoboschoolInvertedPendulum-v1' environment. The program should control the inverted pendulum within the environment using continuous actions to apply torque to the joint.\n\n### Response:"
    },
    {
        "api": "gymnasium",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install ale_py gymnasium\n#!pip install swig\n#!pip install gymnasium[box2d]\n#!pip install gymnasium[classic-control]\nimport gymnasium as gym\nfrom gymnasium.utils import play\n\nenv = gym.make(\"FrozenLake-v0\")\n\nmapping = {\"w\": 0,\n            \"a\": 3,\n            \"s\": 2,\n            \"d\": 1}\n\ndefault_action = 0\nplay.play(env, keys_to_action=mapping, noop=default_action)",
        "instruction": "Develop a Python program using the 'gymnasium' API to play the 'FrozenLake-v0' environment. The program should control the agent within the environment using keyboard inputs (W, A, S, D) to move up, left, down, and right, respectively.",
        "prediction": ":import gym\n#\n#\n##!pip install ale_py gymnasium\n#\nimport gymnasium as gym\n\nenv = gym.make(\"FrozenLake-v0\")\n\ndone = False\nwhile not done:\n    action = env.action_space.sample()\n    observation, reward, done, info = env.step(action)\n    print(\"Action:\", action)\n    print(\"Observation:\", observation)\n    print(\"Reward:\", reward)\n    print(\"Done:\", done)\n    print(\"Info:\", info)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program using the 'gymnasium' API to play the 'FrozenLake-v0' environment. The program should control the agent within the environment using keyboard inputs (W, A, S, D) to move up, left, down, and right, respectively.\n\n### Response:"
    },
    {
        "api": "holidays",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install holidays\nimport holidays\n\n# Define the date to check\ndate_to_check = \"2023-07-04\" \n\n# Specify the country or region (e.g., 'US' for the United States)\ncountry_code = 'US'\n\n# Create a dictionary of holidays for the specified country or region\nholiday_dict = holidays.country_holidays(country_code)\n\n# Check if the date is a public holiday\nis_holiday = date_to_check in holiday_dict\n\n# Display the result\nif is_holiday:\n    print(f\"{date_to_check} is a public holiday in {country_code}.\")\nelse:\n    print(f\"{date_to_check} is not a public holiday in {country_code}.\")",
        "instruction": "Create a Python program using the 'holidays' API to check if a specified date is a public holiday in a given country or region.",
        "prediction": ":import holidays\nimport holidays\n\n# Define the date to check\ndate_to_check = \"2023-07-04\" \n\n# Specify the country or region (e.g., 'US' for the United States)\ncountry_code = 'US'\n\n# Create a dictionary of holidays for the specified country\nholiday_dict = holidays.CountryHoliday(country_code, observed=True, years=2023)\n\n# Check if the date is a public holiday in the specified country\nis_holiday = date_to_check in holiday_dict\n\n# Display the result\nif is_holiday:\n    print(f\"{date_to_check} is a public holiday in {country_code}.\")\nelse:\n    print(f\"{date_to_check} is not a public holiday in {country_code}.\")",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'holidays' API to check if a specified date is a public holiday in a given country or region.\n\n### Response:"
    },
    {
        "api": "holidays",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install holidays\nimport holidays\n\n# Specify the country or region (e.g., 'US' for the United States)\ncountry_code = 'US'\n\n# Specify the state or province code (e.g., 'CA' for California)\nstate_code = 'CA'\n\n# Specify the region (e.g., 'LA' for Los Angeles)\nregion = 'LA'\n\n# Specify the year for which you want to list holidays\nyear = 2023\n\n# Create a dictionary of holidays for the specified region and year\nholiday_dict = holidays.RegionHoliday(country_code, region, observed=True, years=year)\n\n# List all the public holidays\nholiday_list = sorted(holiday_dict.keys())\n\n# Display the list of holidays\nprint(f\"Public holidays in {region}, {state_code}, {country_code} for the year {year}:\")\nfor holiday in holiday_list:\n    print(holiday)",
        "instruction": "Create a Python program using the 'holidays' API to list all the public holidays in a specific region (e.g., a city or district) within a country and state for a given year.",
        "prediction": ":import holidays\nimport holidays\n\n# Specify the country or region (e.g., 'US' for the United States)\ncountry_code = 'US'\n\n# Specify the region (e.g., 'NYC' for New York City)\nstate_code = 'NYC'\n\n# Specify the year for which you want to list holidays\nyear = 2023\n\n# Create a dictionary of holidays for the specified region and year\nholiday_dict = holidays.RegionHoliday(country_code, region=state_code, observed=True, years=year)\n\n# List all the public holidays\nholiday_list = sorted(holiday_dict.keys())\n\n# Display the list of holidays\nprint(f\"Public holidays in {state_code}, {country_code} for the year {year}:\")\nfor holiday in holiday_list:\n    print(holiday)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'holidays' API to list all the public holidays in a specific region (e.g., a city or district) within a country and state for a given year.\n\n### Response:"
    },
    {
        "api": "hypothesis",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install hypothesis\nimport re\nimport unittest\nfrom hypothesis import given, strategies as st\n\ndef is_valid_date(date):\n    pattern = r\"^\\d{4}-\\d{2}-\\d{2}$\"\n    return re.match(pattern, date) is not None\n\ndef has_valid_dates(lst):\n    return any(is_valid_date(s) for s in lst)\n\nclass HasValidDatesTest(unittest.TestCase):\n    @given(st.lists(st.text(min_size=10, max_size=10, alphabet=st.characters(whitelist_categories=('Nd', 'Pd')))))\n    def test_has_valid_dates(self, lst):\n        result = has_valid_dates(lst)\n        self.assertEqual(result, any(is_valid_date(s) for s in lst))\n\nif __name__ == \"__main__\":\n    unittest.main()",
        "instruction": "Develop a Python program using the 'hypothesis' API to create and test a hypothetical function. The program should utilize 'hypothesis' to generate test cases for a function that checks if a given list of strings contains any valid dates in the format 'YYYY-MM-DD'. The 'hypothesis' library will be used to generate various input lists and verify the correctness of the date checking function.",
        "prediction": ":import unittest\nimport unittest\nfrom hypothesis import given, strategies as st\nimport validate_dates\n\n\nclass HasValidDateTest(unittest.TestCase):\n    @given(st.lists(st.text()))\n    def test_has_valid_date(self, lst):\n        result = validate_dates.has_valid_date(lst)\n        self.assertEqual(result, any(validate_dates.check_if_valid_date(s) for s in lst))\n\nif __name__ == \"__main__\":\n    unittest.main()",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program using the 'hypothesis' API to create and test a hypothetical function. The program should utilize 'hypothesis' to generate test cases for a function that checks if a given list of strings contains any valid dates in the format 'YYYY-MM-DD'. The 'hypothesis' library will be used to generate various input lists and verify the correctness of the date checking function.\n\n### Response:"
    },
    {
        "api": "hypothesis",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install hypothesis\nimport math\nimport unittest\nfrom hypothesis import given, strategies as st\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n\nclass PrimeNumberTest(unittest.TestCase):\n    @given(st.integers(min_value=0, max_value=100))\n    def test_is_prime(self, n):\n        result = is_prime(n)\n        self.assertEqual(result, all(n % i != 0 for i in range(2, int(math.sqrt(n))+1)))\n\nif __name__ == \"__main__\":\n    unittest.main()",
        "instruction": "Develop a Python program using the 'hypothesis' API to create and test a hypothetical function. The program should utilize 'hypothesis' to generate test cases for a function that checks if a given number is a prime number. The 'hypothesis' library will be used to generate various input numbers and verify the correctness of the prime number checking function.",
        "prediction": ":import math\nimport unittest\nfrom hypothesis import given, strategies as st\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n\nclass PrimeTest(unittest.TestCase):\n    @given(st.integers(min_value=0, max_value=100))\n    def test_is_prime(self, n):\n        result = is_prime(n)\n        self.assertEqual(result, math.is_prime(n))\n\nif __name__ == \"__main__\":\n    unittest.main()",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program using the 'hypothesis' API to create and test a hypothetical function. The program should utilize 'hypothesis' to generate test cases for a function that checks if a given number is a prime number. The 'hypothesis' library will be used to generate various input numbers and verify the correctness of the prime number checking function.\n\n### Response:"
    },
    {
        "api": "hypothesis",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install hypothesis\nimport re\nimport unittest\nfrom hypothesis import given, strategies as st\n\ndef is_valid_ipv4_address(ip_address):\n    pattern = r\"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    return re.match(pattern, ip_address) is not None\n\nclass ValidIPv4AddressTest(unittest.TestCase):\n    @given(st.text(min_size=7, max_size=15, alphabet=st.characters(whitelist_categories=('Nd', 'Pd'))))\n    def test_is_valid_ipv4_address(self, ip_address):\n        result = is_valid_ipv4_address(ip_address)\n        self.assertEqual(result, re.match(r\"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\", ip_address) is not None)\n\nif __name__ == \"__main__\":\n    unittest.main()",
        "instruction": "Develop a Python program using the 'hypothesis' API to create and test a hypothetical function. The program should utilize 'hypothesis' to generate test cases for a function that checks if a given string is a valid IPv4 address. The 'hypothesis' library will be used to generate various input strings and verify the correctness of the IPv4 address validation function.",
        "prediction": ":import unittest\nimport unittest\nfrom hypothesis import given, strategies as st\n\ndef is_valid_ipv4_address(ip_address):\n    ip_split = ip_address.split(\".\")\n    for split_ip in split_ip:\n        if re.search(\"^\\d{1,3}$\", split_ip) is None:\n            return \"Invalid\"\n        if re.search(\"^\\d{1,3}$\", split_ip) is not None:\n            if int(split_ip) < 256:\n                return \"Valid\"\n            else:\n                return \"Invalid\"\n\nclass ValidIpAddress(unittest.TestCase):\n    @given(st.text(min_size=0, max_size=10, alphabet=st.characters(whitelist_categories=('Ll', 'Lu', 'Nd', 'Pd'))))\n    def test_is_valid_ipv4_address(self, ip_address):\n        result = is_valid_ipv4_address(ip_address)\n        self.assertEqual(result, \"Valid\")\n\nif __name__ == \"__main__\":\n    unittest.main()",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program using the 'hypothesis' API to create and test a hypothetical function. The program should utilize 'hypothesis' to generate test cases for a function that checks if a given string is a valid IPv4 address. The 'hypothesis' library will be used to generate various input strings and verify the correctness of the IPv4 address validation function.\n\n### Response:"
    },
    {
        "api": "hypothesis",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install hypothesis\nimport re\nimport unittest\nfrom hypothesis import given, strategies as st\n\ndef has_email_addresses(lst):\n    pattern = r\"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b\"\n    return any(re.match(pattern, s) for s in lst)\n\nclass HasEmailAddressesTest(unittest.TestCase):\n    @given(st.lists(st.text()))\n    def test_has_email_addresses(self, lst):\n        result = has_email_addresses(lst)\n        self.assertEqual(result, any(re.match(r\"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b\", s) for s in lst))\n\nif __name__ == \"__main__\":\n    unittest.main()",
        "instruction": "Develop a Python program using the 'hypothesis' API to create and test a hypothetical function. The program should utilize 'hypothesis' to generate test cases for a function that checks if a given list of strings contains any email addresses. The 'hypothesis' library will be used to generate various input lists and verify the correctness of the email address checking function.",
        "prediction": ":import re\nimport re\n\ndef is_email_add(lst):\n    pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n    return any(re.match(pattern, s) is not None for s in lst)\n\nif __name__ == \"__main__\":\n    def has_email_add(lst):\n        pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n        return any(re.match(pattern, s) is not None for s in lst)\n    \n    def has_email_add(lst):\n        pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n        return any(re.match(pattern, s) is not None for s in lst)\n    \n    def has_email_add(lst):\n        pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n        return any(re.match(pattern, s) is not None for s in lst)\n    \n    def has_email_add(lst):\n        pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n        return any(re.match(pattern, s) is not None for s in lst)\n    \n    def has_email_add(lst):\n        pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n        return any(re.match(pattern, s) is not None for s in lst)\n    \n    def has_email_add(lst):\n        pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n        return any(re.match(pattern, s) is not None for s in lst)\n    \n    def has_email_add(lst):\n        pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n        return any(re.match(pattern, s) is not None for s in lst)\n    \n    def has_email_add(lst):\n        pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n        return any(re.match(pattern, s) is not None for s in lst)\n    \n    def has_email_add(lst):\n        pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n        return any(re.match(pattern, s) is not None for s in lst)\n    \n    def has_email_add(lst):\n        pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n        return any(re.match(pattern, s) is not None for s in lst)\n    \n    def has_email_add(lst):\n        pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program using the 'hypothesis' API to create and test a hypothetical function. The program should utilize 'hypothesis' to generate test cases for a function that checks if a given list of strings contains any email addresses. The 'hypothesis' library will be used to generate various input lists and verify the correctness of the email address checking function.\n\n### Response:"
    },
    {
        "api": "ibis-framework",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install 'ibis-framework[duckdb]'\nimport ibis\nimport pandas as pd\n\nibis.options.interactive = True\n\ndf = pd.DataFrame(\n    [[\"a\", 1, 2], [\"b\", 3, 4], [\"c\", 5, 6]],\n    columns=[\"one\", \"two\", \"three\"],\n    index=[5, 6, 7],\n)\nt = ibis.memtable(df, name=\"t\")\n\n# Add a new column to the table\ntransformed_table = t.mutate(four=t.two + t.three)\n\n# Rename existing columns\ntransformed_table = transformed_table.rename({\"one\": \"new_one\", \"two\": \"new_two\", \"three\": \"new_three\", \"four\": \"new_four\"})\n\nprint(\"Transformed table: \")\nprint(transformed_table)",
        "instruction": "Create a Python program using the 'ibis-framework' API to perform data transformation operations on a data table. The program should define a sample data table using a Pandas DataFrame and convert it to an 'ibis' table. You need to interact with the 'ibis-framework' library to load the data, transform the table by adding a new column, and rename existing columns.",
        "prediction": ":!pip install 'ibis-framework[duckdb]'\nimport ibis\nimport pandas as pd\n\nibis.options.interactive = True\n\ndf = pd.DataFrame(\n    [[\"a\", 1, 2], [\"b\", 3, 4], [\"c\", 5, 6]],\n    columns=[\"one\", \"two\", \"three\"],\n    index=[5, 6, 7],\n)\nt = ibis.memtable(df, name=\"t\")\n\n# Add a new column to the table\ntransformed_table = t.mutate(four=t.two + t.three)\n\nprint(\"Transformed table: \")\nprint(transformed_table)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'ibis-framework' API to perform data transformation operations on a data table. The program should define a sample data table using a Pandas DataFrame and convert it to an 'ibis' table. You need to interact with the 'ibis-framework' library to load the data, transform the table by adding a new column, and rename existing columns.\n\n### Response:"
    },
    {
        "api": "ibis-framework",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install 'ibis-framework[duckdb]'\nimport ibis\nimport pandas as pd\n\nibis.options.interactive = True\n\ndf = pd.DataFrame(\n    [[\"a\", 1, 2], [\"b\", 3, 4]],\n    columns=[\"one\", \"two\", \"three\"],\n    index=[5, 6],\n)\nt = ibis.memtable(df, name=\"t\")\nprint(\"Ibis data table: \")\nprint(t)\nprint(\"Ibis data schema: \")\nprint(t.schema())",
        "instruction": "Create a Python program using the 'ibis-framework' API to work with data tables and schemas. The program should define a sample data table using a Pandas DataFrame and convert it to an 'ibis' table. You need to interact with the 'ibis-framework' library to load the data, define a schema, and display the table and its schema.",
        "prediction": ":fromibis import pandas_to_ibis\nfrom ibis.options import DataTable, Schema\n\n# Define the data table and convert it to an 'ibis' table\nt = pandas_to_ibis([\"table1\"], pd.read_csv(\"table1.csv\"))\n\n# Define the schema and display the table and its schema\nt = t.to_ibis(\"type_to_decide\", type=\"tframe\")\n\nprint(\"Table: \")\nprint(t)\nprint(\"Schema: \")\nprint(t.schema)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'ibis-framework' API to work with data tables and schemas. The program should define a sample data table using a Pandas DataFrame and convert it to an 'ibis' table. You need to interact with the 'ibis-framework' library to load the data, define a schema, and display the table and its schema.\n\n### Response:"
    },
    {
        "api": "json-tricks",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install json_tricks\nfrom json_tricks import dumps\nimport math\n\ndata = {\n    'pi': math.pi,\n    'nan_value': math.nan,\n    'infinity_value': math.inf\n}\n\njson_str = dumps(data, special_values={'NaN': 'NaN', 'Infinity': 'Infinity'}, indent=4)\n\nprint(json_str)",
        "instruction": "Create a Python program that uses 'json-tricks' to handle JSON data with custom serialization of NaN and Infinity. Define a dictionary with floating-point values that include NaN and Infinity. Serialize the dictionary into a JSON string using 'dumps' and ensure that the custom serialization of NaN and Infinity is applied.",
        "prediction": ":import json_tricks\nfrom json_tricks import dumps\n\ndata = {\n    'nan': float('nan'),\n    'inf': Dict['floating-point values include NaN and Infinity']\n}\n\njson_str = dumps(data, indent=4)\n\nprint(json_str)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses 'json-tricks' to handle JSON data with custom serialization of NaN and Infinity. Define a dictionary with floating-point values that include NaN and Infinity. Serialize the dictionary into a JSON string using 'dumps' and ensure that the custom serialization of NaN and Infinity is applied.\n\n### Response:"
    },
    {
        "api": "json-tricks",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install json_tricks\nfrom json_tricks import dumps\n\nnested_data = {\n    'name': 'John',\n    'info': {\n        'age': 30,\n        'address': {\n            'street': '123 Main St',\n            'city': 'Cityville'\n        },\n        'hobbies': ['Reading', 'Traveling']\n    }\n}\n\njson_str = dumps(nested_data, indent=4)\n\nprint(json_str)",
        "instruction": "Develop a Python program that showcases the use of 'json-tricks' to handle JSON data with nested objects. Create a dictionary containing nested dictionaries and lists. Serialize the dictionary into a JSON string using 'dumps' and ensure that the nested structure is preserved.",
        "prediction": ":import json\n\nfrom json_tricks import dumps\n\ndata = {\n    'name': 'Eve',\n    'age': 28,\n    'children': None\n}\n\njson_str = dumps(data, indent=4)\n\nprint(json_str)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that showcases the use of 'json-tricks' to handle JSON data with nested objects. Create a dictionary containing nested dictionaries and lists. Serialize the dictionary into a JSON string using 'dumps' and ensure that the nested structure is preserved.\n\n### Response:"
    },
    {
        "api": "json-tricks",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install json_tricks\nfrom json_tricks import dumps, loads\n\ndef custom_encoder(obj):\n    if isinstance(obj, complex):\n        return {'__complex__': True, 'real': obj.real, 'imag': obj.imag}\n    raise TypeError(repr(obj) + ' is not JSON serializable')\n\ndef custom_decoder(dct):\n    if '__complex__' in dct:\n        return complex(dct['real'], dct['imag'])\n    return dct\n\ndata = {\n    'complex_number': 2 + 3j,\n    'regular_number': 42\n}\n\njson_str = dumps(data, default=custom_encoder, indent=4)\nparsed_data = loads(json_str, object_hook=custom_decoder)\n\nprint(parsed_data['complex_number'])\nprint(parsed_data['regular_number'])",
        "instruction": "Create a Python program that showcases the use of 'json-tricks' for handling JSON data with custom encoder and decoder functions. Define custom functions for encoding and decoding data. Use these functions to serialize and deserialize a dictionary containing special data types. Ensure that the custom encoding and decoding functions are applied to the data.",
        "prediction": ":import json\nfrom json_tricks import dumps\nfrom json_tricks import loads\n\ndata = {\n    'name': 'Example',\n    'int_data': 10,\n    'float_data': 3.14159,\n    'list': [1, 2, 'Text'],\n    'int_encoder': lambda i: int(i),\n    'float_encoder': lambda f: int(f),\n    'int_encoder_fail': lambda i: int(i) + 10,\n    'float_encoder_fail': lambda f: int(f) + 10\n}\n\njson_str = dumps(data, encoder=int_encoder, decoder=float_encoder)\nprint(json_str)\n\ndata = loads(json_str, decoder=int_encoder, encoder=float_encoder)\nprint(data)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that showcases the use of 'json-tricks' for handling JSON data with custom encoder and decoder functions. Define custom functions for encoding and decoding data. Use these functions to serialize and deserialize a dictionary containing special data types. Ensure that the custom encoding and decoding functions are applied to the data.\n\n### Response:"
    },
    {
        "api": "json-tricks",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install json_tricks\nfrom json_tricks import dumps\n\nclass CustomObject:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\ndata = {\n    'person': CustomObject('Frank', 45)\n}\n\njson_str = dumps(data, object_serialization={\n    'person': lambda obj: {'name': obj.name, 'age': obj.age}\n}, indent=4)\n\nprint(json_str)",
        "instruction": "Develop a Python program that demonstrates the use of 'json-tricks' for handling JSON data with custom object serialization. Define a dictionary that includes custom Python objects and serialize it into a JSON string using 'dumps'. Specify custom serialization options for the objects.",
        "prediction": ":import json_tricks\nfrom json_tricks import dumps\n\ndata = {\n    'person': is_handle,\n    'handle': is_handle\n}\n\njson_str = dumps(data, indent=4, indent_type='space', indent_cls=JSONEncoder, indent_space=2)\n\nprint(json_str)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that demonstrates the use of 'json-tricks' for handling JSON data with custom object serialization. Define a dictionary that includes custom Python objects and serialize it into a JSON string using 'dumps'. Specify custom serialization options for the objects.\n\n### Response:"
    },
    {
        "api": "json-tricks",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install json_tricks\nfrom json_tricks import dumps, loads\n\npeople = [\n    {'name': 'Alice', 'age': 25, 'address': '123 Main St'},\n    {'name': 'Bob', 'age': 30, 'address': '456 Elm St'},\n    {'name': 'Charlie', 'age': 35, 'address': '789 Oak St'}\n]\n\njson_str = dumps(people, indent=4)\nparsed_people = loads(json_str)\n\nprint(parsed_people)\nprint(parsed_people[0]['name'])  # Should print 'Alice'.",
        "instruction": "Create a Python program that demonstrates the use of 'json-tricks' for handling JSON arrays. Define a list of dictionaries, each representing a person's information, such as name, age, and address. Serialize this list of dictionaries into a JSON string using the 'dumps' function. Then, deserialize the JSON string back into a list of dictionaries using the 'loads' function.",
        "prediction": ":import json\nimport json\n\ndata = [ {'name': 'RandomName', 'age': 'RandomAge', 'address': 'RandomAddress'} for _ in range(5)]\n\njson_str = json.dumps(data, indent=4)\n\ndata_deserialized = json.loads(json_str)\n\nprint(data_deserialized)\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that demonstrates the use of 'json-tricks' for handling JSON arrays. Define a list of dictionaries, each representing a person's information, such as name, age, and address. Serialize this list of dictionaries into a JSON string using the 'dumps' function. Then, deserialize the JSON string back into a list of dictionaries using the 'loads' function.\n\n### Response:"
    },
    {
        "api": "jsonschema",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install jsonschema\nimport jsonschema\n\n# Define a JSON schema with conditional validation based on properties\nschema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"isAdult\": {\"type\": \"boolean\"},\n        \"age\": {\"type\": \"integer\"}\n    },\n    \"if\": {\"properties\": {\"isAdult\": {\"const\": True}}, \"then\": {\"required\": [\"age\"]}}\n}\n\n# Create a JSON object to validate\njson_data = {\n    \"isAdult\": True,\n    \"age\": 25\n}\n\n# Validate the JSON data against the schema with conditional validation\ntry:\n    jsonschema.validate(instance=json_data, schema=schema)\n    print(\"JSON data is valid according to the schema with conditional validation.\")\nexcept jsonschema.exceptions.ValidationError as e:\n    print(f\"JSON data is not valid according to the schema with conditional validation. Error: {e}\")\n",
        "instruction": "Create a Python program that uses 'jsonschema' to validate a JSON object against a schema with conditional validation based on properties.",
        "prediction": ":import jsonschema\nimport jsonschema\n\n# Define a JSON schema with conditional validation based on properties\nschema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"isMember\": {\"type\": \"boolean\"},\n        \"membershipType\": {\"type\": \"string\"},\n        \"discountCode\": {\"type\": \"string\"}\n    },\n    \"dependencies\": {\n        \"discountCode\": {\n            \"properties\": {\n                \"discount\": {\"type\": \"object\"}\n            },\n            \"dependencies\": {\n                \"discount\": {\n                    \"properties\": {\n                        \"discountType\": {\"type\": \"string\"}\n                    }\n                }\n            }\n        }\n    }\n}\n\n# Create a JSON object to validate\njson_data = {\n    \"isMember\": True,\n    \"membershipType\": \"Premium\",\n    \"discountCode\": \"MEMBER123\"\n}\n\n# Customise the schema with conditional validation based on properties\ntry:\n    jsonschema.validate(instance=json_data, schema=schema)\n    schema.validate(instance=json_data)\n    print(\"JSON data is valid according to the schema with conditional validation.\")\nexcept jsonschema.exceptions.ValidationError as e:\n    print(f\"JSON data is not valid according to the schema with conditional validation. Error: {e}\")\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses 'jsonschema' to validate a JSON object against a schema with conditional validation based on properties.\n\n### Response:"
    },
    {
        "api": "jsonschema",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install jsonschema\nimport jsonschema\n\n# Define a JSON schema with format-based date validation for a property, custom keyword validation, conditional validation based on property values, and pattern-based validation for another property\nschema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"birthDate\": {\"type\": \"string\", \"format\": \"date\"},\n        \"isStudent\": {\"type\": \"boolean\"},\n        \"studentID\": {\"type\": \"string\"},\n        \"email\": {\"type\": \"string\", \"pattern\": \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\"}\n    },\n    \"custom_keywords\": {\n        \"student_required\": {\n            \"if\": {\"properties\": {\"isStudent\": {\"const\": True}}, \"then\": {\"required\": [\"studentID\"]}}\n        },\n        \"student_email_required\": {\n            \"if\": {\n                \"properties\": {\"isStudent\": {\"const\": True}, \"studentID\": {\"pattern\": \"^[A-Z]{3}[0-9]{3}$\"}},\n                \"then\": {\"required\": [\"email\"]}\n            }\n        }\n    }\n}\n\n# Create a JSON object to validate\njson_data = {\n    \"birthDate\": \"1995-01-15\",\n    \"isStudent\": True,\n    \"studentID\": \"ABC123\",\n    \"email\": \"student@example.com\"\n}\n\n# Custom keyword validation function\ndef validate_custom_keywords(validator, custom_keywords, instance, schema):\n    if instance[\"isStudent\"] and \"studentID\" in instance and not instance[\"studentID\"].startswith(\"ABC\"):\n        yield jsonschema.exceptions.ValidationError(\"Student ID must start with 'ABC' for students.\")\n    if instance[\"isStudent\"] and \"studentID\" in instance and not instance[\"email\"].endswith(\"student.com\"):\n        yield jsonschema.exceptions.ValidationError(\"Invalid email format for student with ID starting with 'ABC'.\")\n\n# Add the custom keyword validator to the validator registry\njsonschema.validators.validator_for(schema).VALIDATORS[\"custom_keywords\"] = validate_custom_keywords\n\n# Validate the JSON data against the schema with format-based date validation, custom keywords, conditional validation, and pattern-based validation\ntry:\n    jsonschema.validate(instance=json_data, schema=schema, format_checker=jsonschema.FormatChecker())\n    print(\"JSON data is valid according to the schema with format-based date validation, custom keywords, conditional validation, and pattern-based validation.\")\nexcept jsonschema.exceptions.ValidationError as e:\n    print(f\"JSON data is not valid according to the schema. Error: {e}\")\n",
        "instruction": "Create a Python program that utilizes 'jsonschema' to validate a JSON object against a schema with format-based date validation for a property, custom keyword validation, conditional validation based on property values, and pattern-based validation for another property.",
        "prediction": ":import jsonschema\nimport jsonschema\n\n# Define a JSON schema with format-based date validation for a property, custom keyword validation, conditional validation based on property values\nschema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"dateOfBirth\": {\"type\": \"string\", \"format\": \"date\"},\n        \"employeeType\": {\"type\": \"string\", \"custom\": custom_keywords},\n        \"employeeID\": {\"type\": \"string\"},\n        \"salary\": {\n            \"type\": \"integer\",\n            \"M: 0, D: 0, \": conditional,\n            \"P: 1, \": patternbased validation for another property\n        }\n    },\n    \"custom_keywords\": {\n        \"validate_employee_type\": custom_keywords\n    }\n}\n\n# Create a JSON object to validate\njson_data = {\n    \"dateOfBirth\": \"1990-05-20\",\n    \"employeeType\": \"P\",\n    \"employeeID\": \"M123\",\n    \"salary\": \"D123\"\n}\n\n# Custom keyword validation function\ndef custom_keywords(json_data, *, format=None, custom_keywords=()):\n    if not json_data is json_data:\n        return \"Invalid data\"\n\n    # Custom keyword validation function\n    return not set(custom_keywords) - set(json_data)\n\n# Conditional validation function, custom keywords validation function\ndef conditional(json_data, schema):\n    return not set(schema['M: 0, D: 0, ']) - set(json_data)\n\n# Pattern-based validation for another property, pattern-based validation for another property\ndef patternbased(json_data, schema):\n    return not not not set(schema['P: 1, ']) and not set(schema['P: 1, ']) and not json_data is json_data\n\n# Custom keyword validation function\ndef custom_keywords(json_data, *, format=None, custom_keywords=()):\n    if not json_data is json_data:\n        return \"Invalid data\"\n\n    # Custom keyword validation function\n    return not set(custom_keywords) - set(json_data)\n\n# Conditional validation function\ndef conditional(json_data, schema):\n    return not not set(schema['M: 0, D: 0, ']) and not set(schema['M: 0, D: 0, ']) and not json_data is json_data\n\n# Pattern-based validation for another property\ndef patternbased(json_data, schema):\n    return not not not set(schema['P: 1, ']) and not set(schema['P: 1, ']) and not json_data is json_data\n\n# Custom keyword validation function\ndef custom_keywords(json_data, *, format=None, custom_keywords=()):\n    if not json_data is json_data:\n        return \"Invalid data\"\n\n    # Custom keyword validation function\n    return not set(custom_keywords) - set(json_data)\n\n# Conditional validation function\ndef conditional(json_data, schema):\n    return not not set(schema['M: 0, D: 0, ']) and not set(schema['M: 0, D: 0, ']) and not json_data is json_data\n\n# Pattern-based validation for another property\ndef patternbased(json_data, schema):\n    return not not not set(schema['P: 1, ']) and not set(schema['P: 1, ']) and not json_data is json_data\n\n# Custom keyword validation function\ndef custom_keywords(json_data, *, json_data\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that utilizes 'jsonschema' to validate a JSON object against a schema with format-based date validation for a property, custom keyword validation, conditional validation based on property values, and pattern-based validation for another property.\n\n### Response:"
    },
    {
        "api": "jsonschema",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install jsonschema\nimport jsonschema\n\n# Define a JSON schema with custom keyword validation\nschema = {\n    \"type\": \"object\",\n    \"custom_keyword\": \"my_custom_value\"\n}\n\n# Create a JSON object to validate\njson_data = {\n    \"custom_keyword\": \"my_custom_value\"\n}\n\n# Custom keyword validation function\ndef validate_custom_keyword(validator, custom_keyword, instance, schema):\n    if instance != custom_keyword:\n        yield jsonschema.exceptions.ValidationError(f\"Value does not match the custom keyword: {custom_keyword}\")\n\n# Add the custom keyword validator to the validator registry\njsonschema.validators.validator_for(schema).VALIDATORS[\"custom_keyword\"] = validate_custom_keyword\n\n# Validate the JSON data against the schema with custom keyword validation\ntry:\n    jsonschema.validate(instance=json_data, schema=schema)\n    print(\"JSON data is valid according to the schema with custom keyword validation.\")\nexcept jsonschema.exceptions.ValidationError as e:\n    print(f\"JSON data is not valid according to the schema with custom keyword validation. Error: {e}\")\n",
        "instruction": "Create a Python program that utilizes 'jsonschema' to validate a JSON object against a schema that includes custom keyword validation.",
        "prediction": ":import jsonschema\nimport jsonschema\n\n# Define a JSON schema with custom keyword validation\nschema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"email\": {\"type\": \"string\", \"custom\": 50}\n    }\n}\n\n# Create a JSON object to validate\njson_data = {\n    \"email\": \"example@email.com\"\n}\n\n# Custom keyword validation function\ndef validate_custom_keywords(validator, custom_keywords, instance, schema):\n    if instance[\"email\"].endswith(\"@email.com\"):\n        return\n    yield jsonschema.exceptions.ValidationError(\"Invalid email format.\")\n\n# Add the custom keyword validator to the validator registry\njsonschema.validators.validator_for(schema).VALIDATORS[\"custom\"] = validate_custom_keywords\n\n# Validate the JSON data against the schema with custom keywords\ntry:\n    jsonschema.validate(instance=json_data, schema=schema)\n    print(\"JSON data is valid according to the schema with custom keywords.\")\nexcept jsonschema.exceptions.ValidationError as e:\n    print(f\"JSON data is not valid according to the schema with custom keywords. Error: {e}\")\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that utilizes 'jsonschema' to validate a JSON object against a schema that includes custom keyword validation.\n\n### Response:"
    },
    {
        "api": "langchain",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install langchain\n# Import necessary libraries\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.prompts import ChatPromptTemplate\nfrom langchain.chains import LLMChain\n\n# Define the GPT-3.5 Turbo model\nllm_model = \"gpt-3.5-turbo\"\n\n# Initialize a ChatOpenAI instance with the specified model and temperature\nllm = ChatOpenAI(temperature=0.5, model=llm_model)\n\n# Define a template for chat prompts, where {country} will be replaced with the actual country name\nprompt = ChatPromptTemplate.from_template(\"What is the capital of {country}?\")\n\n# Initialize an LLMChain with the ChatOpenAI instance and the prompt template\nchain = LLMChain(llm=llm, prompt=prompt)\n\n# Specify the country you want to inquire about\ncountry = \"Germany\"\n\n# Run the chain to get a response about the capital of the specified country\nchain.run(country)",
        "instruction": "Create a Python program that utilizes the \"langchain\" API to interact with the GPT-3.5 Turbo model. Define a chat prompt template that includes a variable {country}. Use this template to inquire about the capital of a specific country, e.g., \"What is the capital of {country}?\" Replace {country} with \"Germany\" and retrieve the model's response. Save the response.",
        "prediction": ":!pip install langchain\nfrom langchain import pipe\n\n# Create a Chat Prompt Template\nchat_template = {\n    \"country\": \"Germany\",\n    \"prompt. [country = 'Germany']\":",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that utilizes the \"langchain\" API to interact with the GPT-3.5 Turbo model. Define a chat prompt template that includes a variable {country}. Use this template to inquire about the capital of a specific country, e.g., \"What is the capital of {country}?\" Replace {country} with \"Germany\" and retrieve the model's response. Save the response.\n\n### Response:"
    },
    {
        "api": "linear-operator",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install linear-operator\nimport torch\nfrom linear_operator import to_linear_operator\nfrom scipy.linalg import eigh\n\n# Define a square matrix M\nM = torch.Tensor([[4, 2], [2, 5]])\n\n# Compute the eigenvalues and eigenvectors\nM_op = to_linear_operator(M)\neigenvalues, eigenvectors = eigh(M_op.to_dense())\n\n# Print the eigenvalues and eigenvectors\nprint(\"Eigenvalues:\", eigenvalues)\nprint(\"Eigenvectors:\", eigenvectors)",
        "instruction": "Create a Python program that utilizes the 'linear-operator' API to compute the eigenvalues and eigenvectors of a given square matrix. The program should print the computed eigenvalues and eigenvectors.",
        "prediction": ":import linear-operator\nimport torch\n\n# Define a square matrix M\nM = torch.Tensor([[1, 2], [3, 4]])\n\n# Compute the eigenvalues and eigenvectors of M\neigenvalues, eigenvectors = torch.eig(M)\n\n# Print the computed eigenvalues\nprint(\"Eigenvalues:\", eigenvalues)\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that utilizes the 'linear-operator' API to compute the eigenvalues and eigenvectors of a given square matrix. The program should print the computed eigenvalues and eigenvectors.\n\n### Response:"
    },
    {
        "api": "linear-operator",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install linear-operator\nimport torch\nfrom linear_operator import to_linear_operator\nfrom scipy.linalg import sinm\n\n# Define a matrix M\nM = torch.Tensor([[1, 2], [3, 4]])\n\n# Compute the matrix sine\nM_op = to_linear_operator(M)\nmatrix_sine = sinm(M_op.to_dense())\n\n# Print the matrix sine\nprint(\"Matrix Sine:\", matrix_sine)",
        "instruction": "Create a Python program that utilizes the 'linear-operator' API to compute the matrix sine of a given matrix. The program should print the computed matrix sine.",
        "prediction": ":import linear-operator\nimport torch\n\n# Define a matrix M\nM = torch.Tensor([[1, 2], [3, 4]])\n\n# Compute the matrix sine S\nM_op = linear_operator.to_dense(M)\nM_op_op = linear_operator.to_dense(M_op)\n\n# Compute the matrix sine\nM_op_op_op = linear_operator.to_dense(M_op_op)\n\n# Print the matrix sine\nprint(\"Matrix Sine:\", M_op_op_op)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that utilizes the 'linear-operator' API to compute the matrix sine of a given matrix. The program should print the computed matrix sine.\n\n### Response:"
    },
    {
        "api": "linear-operator",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install linear-operator\nimport torch\nfrom linear_operator import to_linear_operator\nfrom scipy.linalg import sqrtm\n\n# Define a matrix M\nM = torch.Tensor([[1, 2], [3, 4]])\n\n# Compute the matrix square root\nM_op = to_linear_operator(M)\nmatrix_sqrt = sqrtm(M_op.to_dense())\n\n# Print the matrix square root\nprint(\"Matrix Square Root:\", matrix_sqrt)",
        "instruction": "Create a Python program that utilizes the 'linear-operator' API to compute the matrix square root of a given matrix. The program should print the computed matrix square root.",
        "prediction": ":import linear-operator\nimport torch\n\n# Define a matrix M\nM = torch.Tensor([[1, 2], [3, 4]])\n\n# Compute the matrix square root of M\nM_op = linear_operator.to_dense(M)\nM_op_op = linear_operator.to_dense(torch.cholesky(M_op))\n\n# Print the matrix square root\nprint(\"Matrix Square Root:\", M_op_op)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that utilizes the 'linear-operator' API to compute the matrix square root of a given matrix. The program should print the computed matrix square root.\n\n### Response:"
    },
    {
        "api": "llama-index",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install llama-cpp-python\n#!pip install llama-index html2text trafilatura\n\nfrom llama_index import GPTListIndex\nfrom llama_index import TrafilaturaWebReader\n\ndef scrape_and_index_robotics_info(url, *topics):\n    documents = TrafilaturaWebReader().load_data([url])\n    index = GPTListIndex.from_documents(documents)\n    engine = index.as_query_engine()\n\n    results = {}\n    for topic in topics:\n        results[topic] = engine.query(topic)\n\n    return results\n\nif __name__ == \"__main__\":\n    url = \"https://en.wikipedia.org/wiki/Robotics\"\n    topics = [\"History of robotics\", \"Types of robotics\"]\n    extracted_data = scrape_and_index_robotics_info(url, *topics)\n    \n    for topic, data in extracted_data.items():\n        print(f\"{topic}:\\n{data}\")",
        "instruction": "Develop a Python program using the 'llama-index' API to scrape and index data from 'https://en.wikipedia.org/wiki/Robotics.' Extract information about the history and types of robotics. Print the extracted information.",
        "prediction": ":import pprint\n#!pip install llama-cpp-python\n#!pip install llama-index html2text trafilatura\n\nfrom llama_index import GPTListIndex\nfrom llama_index import TrafilaturaWebReader\n\ndef scrape_and_index_robotics_info(url, *topics):\n    documents = TrafilaturaWebReader().load_data([url])\n    index = GPTListIndex.from_documents(documents)\n    engine = index.as_query_engine()\n\n    results = {}\n    for topic in topics:\n        results[topic] = engine.query(topic)\n\n    return results\n\nif __name__ == \"__main__\":\n    url = \"https://en.wikipedia.org/wiki/Robotics\"\n    topics = [\"History of robotics\", \"Types of robotics\"]\n    extracted_data = scrape_and_index_robotics_info(url, *topics)\n\n    for topic, data in extracted_data.items():\n        print(f\"{topic}:\\n{data}\")",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program using the 'llama-index' API to scrape and index data from 'https://en.wikipedia.org/wiki/Robotics.' Extract information about the history and types of robotics. Print the extracted information.\n\n### Response:"
    },
    {
        "api": "llama-index",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install llama-cpp-python\n#!pip install llama-index html2text trafilatura\n\nfrom llama_index import GPTListIndex\nfrom llama_index import TrafilaturaWebReader\n\ndef scrape_and_index_machine_vision_info(url, *topics):\n    documents = TrafilaturaWebReader().load_data([url])\n    index = GPTListIndex.from_documents(documents)\n    engine = index.as_query_engine()\n\n    results = {}\n    for topic in topics:\n        results[topic] = engine.query(topic)\n\n    return results\n\nif __name__ == \"__main__\":\n    url = \"https://en.wikipedia.org/wiki/Machine_vision\"\n    topics = [\"History of machine vision\", \"Applications of machine vision\"]\n    extracted_data = scrape_and_index_machine_vision_info(url, *topics)\n\n    for topic, data in extracted_data.items():\n        print(f\"{topic}:\\n{data}\")",
        "instruction": "Write a Python program using the 'llama-index' API to scrape and index data from 'https://en.wikipedia.org/wiki/Machine_vision.' Extract information about the history and applications of machine vision. Print the extracted information.",
        "prediction": ":import pprint\n#!pip install llama-cpp-python\n#!pip install llama-index html2text trafilatura\n\nfrom llama_index import GPTListIndex\nfrom llama_index import TrafilaturaWebReader\n\ndef scrape_and_index_machine_vision_info(url, *topics):\n    documents = TrafilaturaWebReader().load_data([url])\n    index = GPTListIndex.from_documents(documents)\n    engine = index.as_query_engine()\n\n    results = {}\n    for topic in topics:\n        results[topic] = engine.query(topic)\n\n    return results\n\nif __name__ == \"__main__\":\n    url = \"https://en.wikipedia.org/wiki/Machine_vision\"\n    topics = [\"History of machine vision\", \"Applications of machine vision\"]\n    extracted_data = scrape_and_index_machine_vision_info(url, *topics)\n\n    for topic, data in extracted_data.items():\n        print(f\"{topic}:\\n{data}\")",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program using the 'llama-index' API to scrape and index data from 'https://en.wikipedia.org/wiki/Machine_vision.' Extract information about the history and applications of machine vision. Print the extracted information.\n\n### Response:"
    },
    {
        "api": "mlflow",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install mlflow\nimport mlflow\nimport numpy as np\nfrom sklearn.cluster import KMeans\n\n# Generate a synthetic dataset\nX = np.random.rand(300, 2)\n\n# Start an MLflow run\nwith mlflow.start_run() as run:\n    # Train a K-means clustering model\n    kmeans = KMeans(n_clusters=3, random_state=42)\n    kmeans.fit(X)\n    \n    # Log hyperparameters\n    mlflow.log_params(kmeans.get_params())\n    \n    # Log the trained model\n    mlflow.sklearn.log_model(kmeans, \"kmeans_model\")\n",
        "instruction": "Develop a program that uses the MLflow API to train a K-means clustering model on a synthetic dataset. Log the model and its hyperparameters.",
        "prediction": ":import mlflow\nimport mlflow\nimport numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics.cluster import accuracy_score\n\n# Generate a synthetic dataset\nX = np.random.rand(200, 5)\n\n# Split the dataset into training and testing sets\nX_train = X[:100]\nX_test = X[100:]\n\n# Create a K-means clustering model\nkmeans = KMeans(n_clusters=3)\n\n# Train the model\nkmeans.fit(X_train)\n\n# Log hyperparameters\nkmeans_hyperparams = {\"n_clusters\": kmeans.n_clusters, \"max_iter\": kmeans.max_iter}\n\n# Make and MLflow run\nwith mlflow.start_run() as run:\n    # Log hyperparameters\n    mlflow.log_params(kmeans_hyperparams)\n    \n    # Make a prediction on the test set\n    clusters = kmeans.predict(X_test)\n    \n    # Calculate and log accuracy\n    accuracy = accuracy_score(y_true=clusters, y_pred=kmeans.predict(X_test))\n    mlflow.log_metric(\"accuracy\", accuracy)\n    \n    # Log the trained model\n    mlflow.sklearn.log_model(kmeans, \"kmeans_model\")\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program that uses the MLflow API to train a K-means clustering model on a synthetic dataset. Log the model and its hyperparameters.\n\n### Response:"
    },
    {
        "api": "mlflow",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install mlflow\nimport mlflow\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Generate a synthetic binary classification dataset\nX = np.random.rand(100, 10)\ny = np.random.randint(2, size=100)\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Start an MLflow run\nwith mlflow.start_run() as run:\n    # Train a logistic regression classifier\n    logreg = LogisticRegression(random_state=42)\n    logreg.fit(X_train, y_train)\n    \n    # Log hyperparameters\n    mlflow.log_params(logreg.get_params())\n    \n    # Log the trained model\n    mlflow.sklearn.log_model(logreg, \"logistic_regression_model\")\n",
        "instruction": "Develop a program that uses the MLflow API to train a logistic regression classifier on a synthetic binary classification dataset. Log the model and its hyperparameters.",
        "prediction": ":import mlflow\nimport mlflow\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# Generate a synthetic binary classification dataset\nX = np.random.rand(100, 10)\ny = np.random.randint(2, size=100)\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Start an MLflow run\nwith mlflow.start_run() as run:\n    # Train a logistic regression classifier\n    logreg = LogisticRegression(random_state=42)\n    logreg.fit(X_train, y_train)\n    \n    # Log hyperparameters\n    mlflow.log_params(logreg.get_params())\n    \n    # Make predictions on the test set\n    y_pred = logreg.predict(X_test)\n    \n    # Calculate and log accuracy as a metric\n    accuracy = accuracy_score(y_test, y_pred)\n    mlflow.log_metric(\"accuracy\", accuracy)\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program that uses the MLflow API to train a logistic regression classifier on a synthetic binary classification dataset. Log the model and its hyperparameters.\n\n### Response:"
    },
    {
        "api": "mlflow",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install mlflow\nimport mlflow\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Load the Iris dataset\ndata = load_iris()\nX, y = data.data, data.target\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Start an MLflow run\nwith mlflow.start_run() as run:\n    # Train a Decision Tree classifier\n    clf = DecisionTreeClassifier()\n    clf.fit(X_train, y_train)\n    \n    # Log hyperparameters\n    mlflow.log_param(\"criterion\", clf.criterion)\n    mlflow.log_param(\"max_depth\", clf.max_depth)\n    \n    # Make predictions on the test set\n    y_pred = clf.predict(X_test)\n    \n    # Calculate and log accuracy as a metric\n    accuracy = accuracy_score(y_test, y_pred)\n    mlflow.log_metric(\"accuracy\", accuracy)\n    \n    # Save the model as an artifact\n    mlflow.sklearn.log_model(clf, \"decision_tree_model\")",
        "instruction": "Create a program that uses the MLflow API to train a simple decision tree classifier on the Iris dataset. Log the model, its hyperparameters, and accuracy as a metric. Save the model as an artifact.",
        "prediction": ":import mlflow\nimport mlflow\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.datasets import load_iris\n\n# Load the Iris dataset\ndata = load_iris()\nX = data.data\ny = data.target\n\n# Start an MLflow run\nwith mlflow.start_run() as run:\n    # Train a Decision Tree classifier\n    clf = DecisionTreeClassifier(max_depth=2, random_state=42)\n    clf.fit(X, y)\n    \n    # Log hyperparameters\n    mlflow.log_params(clf.get_params())\n    \n    # Make predictions\n    y_pred = clf.predict(X)\n    \n    # Calculate accuracy\n    accuracy = accuracy_score(y, y_pred)\n    \n    # Log metrics\n    mlflow.log_metrics(accuracy=accuracy)\n    \n    # Save the model as an artifact\n    mlflow.sklearn.log_model(clf, \"model\")\n    \n    # Save the file as an artifact\n    mlflow.log_artifact(\"iris.model\")\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that uses the MLflow API to train a simple decision tree classifier on the Iris dataset. Log the model, its hyperparameters, and accuracy as a metric. Save the model as an artifact.\n\n### Response:"
    },
    {
        "api": "more-itertools",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install more-itertools\nfrom more_itertools import consecutive_groups\n\nstrings = [\"123\", \"456\", \"789\", \"abc\", \"def\", \"ghi\", \"123456789\"]\npartitioned_sublists = list(consecutive_groups(strings))\nfiltered_sublists = [sublist for sublist in partitioned_sublists if all(word.isdigit() for word in sublist)]\nlengths = [len(sublist) for sublist in filtered_sublists]\n\nprint(\"Filtered Sublists:\")\nfor sublist in filtered_sublists:\n    print(list(sublist))\n\nprint(\"Lengths:\")\nprint(lengths)",
        "instruction": "Create a Python program using the 'more-itertools' API to demonstrate the grouping and filtering of elements in a list based on a condition. The program should take a list of strings, group them into consecutive sublists using the 'consecutive_groups' function from 'more-itertools', and filter out sublists that contain only strings with all numeric characters. Finally, print the filtered sublists and calculate the length of each sublist and print the lengths.",
        "prediction": ":import more_itertools\nfrom more_itertools import consecutive_groups\n\nstrings = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"]\npartitioned_sublists = list(consecutive_groups(strings))\nfiltered_sublists = [sublist for sublist in partitioned_sublists if all(word.isdigit() for word in sublist)]\nlengths = [len(sublist) for sublist in filtered_sublists]\n\nprint(\"Filtered Sublists:\")\nfor sublist in filtered_sublists:\n    print(list(sublist))\n\nprint(\"Lengths:\")\nprint(lengths)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'more-itertools' API to demonstrate the grouping and filtering of elements in a list based on a condition. The program should take a list of strings, group them into consecutive sublists using the 'consecutive_groups' function from 'more-itertools', and filter out sublists that contain only strings with all numeric characters. Finally, print the filtered sublists and calculate the length of each sublist and print the lengths.\n\n### Response:"
    },
    {
        "api": "more-itertools",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install more-itertools\nfrom more_itertools import consecutive_groups\n\nstrings = [\"APPLE\", \"BANANA\", \"CHERRY\", \"DATE\", \"ELDERBERRY\", \"FIG\", \"GRAPE\"]\npartitioned_sublists = list(consecutive_groups(strings))\nfiltered_sublists = [sublist for sublist in partitioned_sublists if all(word.isupper() for word in sublist)]\nlengths = [len(sublist) for sublist in filtered_sublists]\n\nprint(\"Filtered Sublists:\")\nfor sublist in filtered_sublists:\n    print(list(sublist))\n\nprint(\"Lengths:\")\nprint(lengths)",
        "instruction": "Create a Python program using the 'more-itertools' API to demonstrate the grouping and filtering of elements in a list based on a condition. The program should take a list of strings, group them into consecutive sublists using the 'consecutive_groups' function from 'more-itertools', and filter out sublists that contain only strings with all uppercase letters. Finally, print the filtered sublists and calculate the length of each sublist and print the lengths.",
        "prediction": ":import more_itertools\nfrom more_itertools import consecutive_groups\n\nstrings = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"]\npartitioned_sublists = list(consecutive_groups(strings))\nfiltered_sublists = [sublist for sublist in partitioned_sublists if all(word.isupper() for word in sublist)]\nlengths = [len(sublist) for sublist in filtered_sublists]\n\nprint(\"Filtered Sublists:\")\nfor sublist in filtered_sublists:\n    print(list(sublist))\n\nprint(\"Lengths:\")\nprint(lengths)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'more-itertools' API to demonstrate the grouping and filtering of elements in a list based on a condition. The program should take a list of strings, group them into consecutive sublists using the 'consecutive_groups' function from 'more-itertools', and filter out sublists that contain only strings with all uppercase letters. Finally, print the filtered sublists and calculate the length of each sublist and print the lengths.\n\n### Response:"
    },
    {
        "api": "numpy",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install numpy\nimport numpy as np\n\n# Generate a random matrix of size (3x3)\noriginal_matrix = np.random.rand(3, 3)\nprint(\"Original Matrix: \", original_matrix)\n\n# Compute the matrix's transpose\ntransposed_matrix = np.transpose(original_matrix)\nprint(\"Transposed Matrix: \", transposed_matrix)\n\n# Calculate the matrix product\nmatrix_product = np.dot(original_matrix, transposed_matrix)\nprint(\"Matrix Product: \", matrix_product)",
        "instruction": "Create a Python program that uses the 'numpy' API to perform matrix operations, including generating a random matrix, computing its transpose, and calculating the matrix product.",
        "prediction": ":import numpy as np\nimport numpy as np\n\n# Generate a random matrix of size (3x3)\noriginal_matrix = np.random.rand(3, 3)\nprint(\"Original Matrix: \", original_matrix)\n\n# Compute the matrix transpose of the matrix\ntranspose = np.transpose(original_matrix)\nprint(\"Transpose: \", transpose)\n\n# Calculate the matrix product of the matrix and the transpose\nmatrix_product = np.dot(original_matrix, transpose)\nprint(\"Matrix Product: \", matrix_product)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses the 'numpy' API to perform matrix operations, including generating a random matrix, computing its transpose, and calculating the matrix product.\n\n### Response:"
    },
    {
        "api": "numpy",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install numpy\nimport numpy as np\nimport csv\n\n# Read the CSV file\ndata = []\nwith open('data.csv', 'r') as file:\n    reader = csv.reader(file)\n    for row in reader:\n        data.append(row)\n\n# Convert the data to a numpy array\ndata_array = np.array(data, dtype=float)\n\n# Calculate the mean of each column\nmean = np.mean(data_array, axis=0)\nprint(\"Mean: \", mean)\n\n# Calculate the median of each column\nmedian = np.median(data_array, axis=0)\nprint(\"Median: \", median)\n\n# Calculate the standard deviation of each column\nstd_dev = np.std(data_array, axis=0)\nprint(\"Standard Deviation: \", std_dev)",
        "instruction": "Create a Python program that uses the 'numpy' API to perform statistical operations on a given dataset. The program should read a CSV file containing numerical data, calculate the mean, median, and standard deviation of each column, and display the results.",
        "prediction": ":import numpy as np\nimport numpy as np\n\n# Read the CSV file into a dataset called \"data\":\ndata = np.loadtxt('data.csv', delimiter=',')\n\n# Calculate the mean, median, and standard deviation of each column\nmeans = np.mean(data, axis=0)\nmedians = np.median(data, axis=0)\nstdevs = np.std(data, axis=0)\n\nprint(\"Mean: \", means)\nprint(\"Median: \", medians)\nprint(\"Standard Deviation: \", stdevs)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses the 'numpy' API to perform statistical operations on a given dataset. The program should read a CSV file containing numerical data, calculate the mean, median, and standard deviation of each column, and display the results.\n\n### Response:"
    },
    {
        "api": "optuna",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install optuna scikit-learn\nimport optuna\nimport numpy as np\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification\nfrom sklearn.metrics import f1_score\n\n# Generate a custom dataset\nX, y = make_classification(n_samples=1000, n_features=20, random_state=42)\n\n# Define the machine learning task: Random Forest Classifier\ndef objective(trial):\n    # Define hyperparameters to search\n    n_estimators = trial.suggest_int(\"n_estimators\", 50, 200)\n    max_depth = trial.suggest_int(\"max_depth\", 3, 20)\n\n    # Create and evaluate the random forest classifier with the chosen hyperparameters\n    clf = RandomForestClassifier(n_estimators=n_estimators, max_depth=max_depth, random_state=42)\n    f1_scores = cross_val_score(clf, X, y, cv=5, scoring='f1')\n\n    return np.mean(f1_scores)\n\n# Create a study and optimize hyperparameters\nif __name__ == \"__main__\":\n    study = optuna.create_study(direction=\"maximize\")\n    study.optimize(objective, n_trials=50)\n\n    # Get the best hyperparameters\n    best_params = study.best_params\n    n_estimators = best_params[\"n_estimators\"]\n    max_depth = best_params[\"max_depth\"]\n\n    print(\"Best Hyperparameters:\", best_params)\n\n    # Create and evaluate the random forest classifier with the best hyperparameters\n    clf = RandomForestClassifier(n_estimators=n_estimators, max_depth=max_depth, random_state=42)\n    f1_scores = cross_val_score(clf, X, y, cv=5, scoring='f1')\n    mean_f1_score = np.mean(f1_scores)\n\n    print(\"Cross-Validated F1 Score with Best Hyperparameters:\", mean_f1_score)\n",
        "instruction": "Create a Python program using the 'optuna' API to optimize the hyperparameters of a random forest classifier. The program should search for the best combination of 'n_estimators' and 'max_depth' hyperparameters for a random forest classifier on a custom dataset and print the cross-validated F1 score.",
        "prediction": ":import optuna\nimport optuna\nimport numpy as np\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification\nfrom sklearn.metrics import f1_score\n\n# Generate a custom dataset\nX, y = make_classification(n_samples=1000, n_features=20, random_state=42)\n\n# Define the machine learning task: Random Forest Classifier\ndef objective(trial):\n    # Define hyperparameters to search\n    n_estimators = trial.suggest_int(\"n_estimators\", 50, 200)\n    max_depth = trial.suggest_int(\"max_depth\", 3, 20)\n\n    # Create and evaluate the random forest classifier with the chosen hyperparameters\n    clf = RandomForestClassifier(n_estimators=n_estimators, max_depth=max_depth, random_state=42)\n    f1_scores = cross_val_score(clf, X, y, cv=5, scoring='f1')\n\n    return np.mean(f1_scores)\n\n# Create a study and optimize hyperparameters\nif __name__ == \"__main__\":\n    study = optuna.create_study(direction=\"maximize\")\n    study.optimize(objective, n_trials=50)\n\n    # Get the best hyperparameters\n    best_params = study.best_params\n    n_estimators = best_params[\"n_estimators\"]\n    max_depth = best_params[\"max_depth\"]\n\n    print(\"Best Hyperparameters:\", best_params)\n\n    # Create and evaluate the random forest classifier with the best hyperparameters\n    clf = RandomForestClassifier(n_estimators=n_estimators, max_depth=max_depth, random_state=42)\n    f1_scores = cross_val_score(clf, X, y, cv=5, scoring='f1')\n    mean_f1_score = np.mean(f1_scores)\n\n    print(\"Cross-Validated F1 Score with Best Hyperparameters:\", mean_f1_score)\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'optuna' API to optimize the hyperparameters of a random forest classifier. The program should search for the best combination of 'n_estimators' and 'max_depth' hyperparameters for a random forest classifier on a custom dataset and print the cross-validated F1 score.\n\n### Response:"
    },
    {
        "api": "optuna",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install optuna scikit-learn\nimport optuna\nimport numpy as np\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.datasets import make_classification\n\n# Generate a custom dataset\nX, y = make_classification(n_samples=1000, n_features=20, random_state=42)\n\n# Define the machine learning task: Linear Discriminant Analysis (LDA)\ndef objective(trial):\n    # Define hyperparameters to search\n    n_components = trial.suggest_int(\"n_components\", 1, 20)\n    solver = trial.suggest_categorical(\"solver\", [\"svd\", \"lsqr\", \"eigen\"])\n\n    # Create and evaluate the LDA model with the chosen hyperparameters\n    lda = LinearDiscriminantAnalysis(n_components=n_components, solver=solver)\n    lda.fit(X, y)\n    explained_variance = np.sum(lda.explained_variance_ratio_)\n\n    return explained_variance\n\n# Create a study and optimize hyperparameters\nif __name__ == \"__main__\":\n    study = optuna.create_study(direction=\"maximize\")\n    study.optimize(objective, n_trials=50)\n\n    # Get the best hyperparameters\n    best_params = study.best_params\n    n_components = best_params[\"n_components\"]\n    solver = best_params[\"solver\"]\n\n    print(\"Best Hyperparameters:\", best_params)\n\n    # Create and evaluate the LDA model with the best hyperparameters\n    lda = LinearDiscriminantAnalysis(n_components=n_components, solver=solver)\n    lda.fit(X, y)\n    explained_variance = np.sum(lda.explained_variance_ratio_\n\n)\n\n    print(\"Explained Variance Ratio with Best Hyperparameters:\", explained_variance)\n",
        "instruction": "Create a Python program using the 'optuna' API to optimize the hyperparameters of a linear discriminant analysis (LDA) model. The program should search for the best combination of 'n_components' and 'solver' hyperparameters for an LDA model on a custom dataset and print the explained variance ratio.",
        "prediction": ":import optuna\nimport optuna\nimport numpy as np\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\n# Generate a custom dataset\nX, y = make_classification(n_samples=1000, n_features=20, random_state=42)\n\n# Define the machine learning task: LDA hyperparameters of interest: n_components and solver\ndef objective(trial):\n    # Define hyperparameters to search\n    n_components = trial.suggest_int(\"n_components\", 1, 20)\n    solver = trial.suggest_categorical(\"solver\", [\"svd\", \"lsqr\", \"eigen\"])\n\n    # Create and evaluate the LDA model with the chosen hyperparameters\n    model = LinearDiscriminantAnalysis(n_components=n_components, solver=solver)\n    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)\n    model.fit(X_train, y_train)\n    y_explained_ratio = model.score(X_test, y_test)\n\n    # Calculate the Explained Variance Ratio\n    return y_explained_ratio\n\n# Create a study and optimize hyperparameters\nif __name__ == \"__main__\":\n    study = optuna.create_study(direction=\"maximize\")\n    study.optimize(objective, n_trials=50)\n\n# Get the best hyperparameters\nexplain_ratio = study.best_params[\"y_explained_ratio\"]\nn_components = study.best_params[\"n_components\"]\nsolver = study.best_params[\"solver\"]\n\nprint(\"Best Hyperparameters:\", study.best_params)\n\n\n# Display Explained Variance Ratio\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_seed=42)\nmodel = LinearDiscriminantAnalysis(n_components=n_components, solver=solver)\noptuna.study.\n\nprint(\"Explained Variance Ratio with Best Hyperparameters:\", model.fit(X_train, y_train).score(X_test, y_test))\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'optuna' API to optimize the hyperparameters of a linear discriminant analysis (LDA) model. The program should search for the best combination of 'n_components' and 'solver' hyperparameters for an LDA model on a custom dataset and print the explained variance ratio.\n\n### Response:"
    },
    {
        "api": "pandas",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install pandas\nimport pandas as pd\n\n# Read the JSON file into a DataFrame\ndf = pd.read_json('sales_data.json')\n\n# Calculate total sales revenue for each product\nproduct_sales = df.groupby('Product')['Quantity'].sum() * df.groupby('Product')['Price'].sum()\nproduct_sales = product_sales.reset_index()\nproduct_sales.columns = ['Product', 'Total Revenue']\n\n# Identify the product with the highest revenue\nhighest_revenue_product = product_sales[product_sales['Total Revenue'] == product_sales['Total Revenue'].max()]\n\n# Create a summary DataFrame\nsummary_df = pd.concat([highest_revenue_product, product_sales], axis=1)\n\nprint(\"Summary Dataframe: \")\nprint(summary_df)",
        "instruction": "Create a Python program that uses the 'pandas' API to read a JSON file containing sales data, calculate total sales revenue for each product, identify the product with the highest revenue, and create a summary DataFrame.",
        "prediction": ":import pandas as pd\n\n# Read the JSON file\ndf = pd.read_json('sales_data.json')\n\n# Calculate total sales revenue for each product\nproduct_total_revenue = df.groupby('Product')['Revenue'].sum()\nproduct_total_revenue = product_total_revenue.reset_index()\nproduct_total_revenue.columns = ['Product', 'Total Revenue']\n\n# Identify the product with the highest revenue\nhighest_revenue_product = product_total_revenue[product_total_revenue['Total Revenue'] == product_total_revenue['Total Revenue'].max()]\n\n# Create a summary DataFrame\nsummary_df = pd.concat([highest_revenue_product, product_total_revenue], axis=1)\n\nprint(\"Summary Dataframe: \")\nprint(summary_df)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses the 'pandas' API to read a JSON file containing sales data, calculate total sales revenue for each product, identify the product with the highest revenue, and create a summary DataFrame.\n\n### Response:"
    },
    {
        "api": "pandas",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install pandas\nimport pandas as pd\n\n# Read the CSV file into a DataFrame\ndf = pd.read_csv('sales_data.csv')\n\n# Calculate the total sales revenue for each customer\ncustomer_total_revenue = df.groupby('Customer')['Revenue'].sum()\ncustomer_total_revenue = customer_total_revenue.reset_index()\ncustomer_total_revenue.columns = ['Customer', 'Total Revenue']\n\n# Identify the customer with the highest sales revenue\nhighest_total_revenue_customer = customer_total_revenue[customer_total_revenue['Total Revenue'] == customer_total_revenue['Total Revenue'].max()]\n\n# Create a summary DataFrame\nsummary_df = pd.concat([highest_total_revenue_customer, customer_total_revenue], axis=1)\n\nprint(\"Summary Dataframe: \")\nprint(summary_df)",
        "instruction": "Create a Python program that uses the 'pandas' API to read a CSV file containing sales data, calculate the total sales revenue for each customer, identify the customer with the highest sales revenue, and create a summary DataFrame.",
        "prediction": ":import pandas as pd\n\n# Read the CSV file into a DataFrame\ndf = pd.read_csv('sales_data.csv')\n\n# Calculate the total sales revenue for each customer\ncustomer_total_revenue = df.groupby('Customer')['Revenue'].sum()\ncustomer_total_revenue = customer_total_revenue.reset_index()\ncustomer_total_revenue.columns = ['Customer', 'Total Revenue']\n\n# Identify the customer with the highest sales revenue\nhighest_total_revenue_customer = customer_total_revenue[customer_total_revenue['Total Revenue'] == customer_total_revenue['Total Revenue'].max()]\n\n# Create a summary DataFrame\nsummary_df = pd.concat([highest_total_revenue_customer, customer_total_revenue], axis=1)\n\nprint(\"Summary Dataframe: \")\nprint(summary_df)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses the 'pandas' API to read a CSV file containing sales data, calculate the total sales revenue for each customer, identify the customer with the highest sales revenue, and create a summary DataFrame.\n\n### Response:"
    },
    {
        "api": "pandas",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install pandas\nimport pandas as pd\n\n# Read the CSV file into a DataFrame\ndf = pd.read_csv('customer_data.csv')\n\n# Calculate the average age for each occupation\noccupation_avg_age = df.groupby('Occupation')['Age'].mean()\noccupation_avg_age = occupation_avg_age.reset_index()\noccupation_avg_age.columns = ['Occupation', 'Average Age']\n\n# Identify the occupation with the highest average age\nhighest_avg_age_occupation = occupation_avg_age[occupation_avg_age['Average Age'] == occupation_avg_age['Average Age'].max()]\n\n# Create a summary DataFrame\nsummary_df = pd.concat([highest_avg_age_occupation, occupation_avg_age], axis=1)\n\nprint(\"Summary Dataframe: \")\nprint(summary_df)",
        "instruction": "Create a Python program that uses the 'pandas' API to read a CSV file containing customer data, calculate the average age for each occupation, identify the occupation with the highest average age, and create a summary DataFrame.",
        "prediction": ":import pandas as pd\n\n# Read the CSV file into a DataFrame\ndf = pd.read_csv('customer_data.csv')\n\n# Calculate the average age for each occupation\noccupation_avg_age = df.groupby('occupation')['age'].mean()\noccupation_avg_age = occupation_avg_age.reset_index()\n\n# Identify the occupation with the highest average age\nhighest_avg_age_occupation = occupation_avg_age[occupation_avg_age['age'] == occupation_avg_age['age'].max()]\n\n# Create a summary DataFrame\nsummary_df = pd.concat([highest_avg_age_occupation, occupation_avg_age], axis=1)\n\nprint(summary_df)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses the 'pandas' API to read a CSV file containing customer data, calculate the average age for each occupation, identify the occupation with the highest average age, and create a summary DataFrame.\n\n### Response:"
    },
    {
        "api": "peft",
        "decoder_input_ids": true,
        "ground-truth": "# Install necessary libraries\n#!pip install transformers\n#!pip install peft\n\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\nfrom peft import PeftModel\n\n# Load Models\nbase_model = \"gpt-3.5-turbo\"\npeft_model = \"gpt-3.5-turbo\"\ntokenizer = AutoTokenizer.from_pretrained(base_model)\nmodel = AutoModelForCausalLM.from_pretrained(base_model)\n\n# Load peft\nmodel = PeftModel.from_pretrained(model, peft_model)\nmodel = model.eval()\n\n# Generate code for a language translation application\ntranslation_app_code = model.generate_translation_app_code(max_length=500)\n\n# Print generated language translation application code\nprint(translation_app_code)",
        "instruction": "Create a Python program that utilizes the 'peft' API to generate code for a basic language translation application. Utilize the 'gpt-3.5-turbo' model for code generation. The program should generate code for a language translation application that can translate text between different languages.",
        "prediction": ":import peft\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\n\n# Load Models\nbase_model = \"gpt-3.5-turbo\"\npeft = peft.PPeftModel.from_pretrained(base_model)\ntokenizer = AutoTokenizer.from_pretrained(base_model)\nmodel = AutoModelForCausalLM.from_pretrained(base_model)\n\n# Generate code for a language translation application\napp_code = peft.generate_language_translation_application_code(max_length=500)\n\n# Print generated application code\nprint(app_code)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that utilizes the 'peft' API to generate code for a basic language translation application. Utilize the 'gpt-3.5-turbo' model for code generation. The program should generate code for a language translation application that can translate text between different languages.\n\n### Response:"
    },
    {
        "api": "peft",
        "decoder_input_ids": true,
        "ground-truth": "# Install necessary libraries\n#!pip install transformers\n#!pip install peft\n\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\nfrom peft import PeftModel\n\n# Load Models\nbase_model = \"gpt-3.5-turbo\"\npeft_model = \"gpt-3.5-turbo\"\ntokenizer = AutoTokenizer.from_pretrained(base_model)\nmodel = AutoModelForCausalLM.from_pretrained(base_model)\n\n# Load peft\nmodel = PeftModel.from_pretrained(model, peft_model)\nmodel = model.eval()\n\n# Generate code for a basic e-commerce website\necommerce_website_code = model.generate_ecommerce_website_code(max_length=500)\n\n# Print generated e-commerce website code\nprint(ecommerce_website_code)",
        "instruction": "Develop a Python program using the 'peft' API to generate code for a basic e-commerce website. Utilize the 'gpt-3.5-turbo' model for website code generation. The program should generate code for a simple e-commerce website with product listings, a shopping cart, and checkout functionality.",
        "prediction": ":import peft\nimport peft\n\n# Generate code for a simple e-commerce website\nmodel = \"gpt-3.5-turbo\"\nwebsite_code = peft.generate_code(max_length=500, model_or_model_str=model)\n\n# Print generated e-commerce website code\nprint(website_code)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program using the 'peft' API to generate code for a basic e-commerce website. Utilize the 'gpt-3.5-turbo' model for website code generation. The program should generate code for a simple e-commerce website with product listings, a shopping cart, and checkout functionality.\n\n### Response:"
    },
    {
        "api": "peft",
        "decoder_input_ids": true,
        "ground-truth": "# Install necessary libraries\n#!pip install transformers\n#!pip install peft\n\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\nfrom peft import PeftModel\n\n# Load Models\nbase_model = \"gpt2\"\npeft_model = \"gpt2\"\ntokenizer = AutoTokenizer.from_pretrained(base_model)\nmodel = AutoModelForCausalLM.from_pretrained(base_model)\n\n# Load peft\nmodel = PeftModel.from_pretrained(model, peft_model)\nmodel = model.eval()\n\n# Query description\nquery_description = \"Retrieve all orders placed by customer 'John Smith' in the year 2022.\"\n\n# Generate SQL query\ngenerated_query = model.generate_sql_query(query_description, max_length=200)\n\n# Print generated SQL query\nprint(generated_query)",
        "instruction": "Create a Python program that utilizes the 'peft' API to generate SQL queries based on a given description of a database query. Use the 'gpt2' model for SQL query generation. The program should accept high-level descriptions of queries and produce SQL queries that retrieve the requested data from a database.",
        "prediction": ":import transformers\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\nfrom sqlnet_dataset.example_model import ExampleModel\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\nfrom transformers.utils.query_, app\nfrom transformers.response.output from sqlnet_model\nfrom transformers.utils.query_model for SQL model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transformers.utils.query_model for model\nfrom transform",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that utilizes the 'peft' API to generate SQL queries based on a given description of a database query. Use the 'gpt2' model for SQL query generation. The program should accept high-level descriptions of queries and produce SQL queries that retrieve the requested data from a database.\n\n### Response:"
    },
    {
        "api": "peft",
        "decoder_input_ids": true,
        "ground-truth": "# Install necessary libraries\n#!pip install transformers\n#!pip install peft\n\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\nfrom peft import PeftModel\n\n# Load Models\nbase_model = \"gpt-3.5-turbo\"\npeft_model = \"gpt-3.5-turbo\"\ntokenizer = AutoTokenizer.from_pretrained(base_model)\nmodel = AutoModelForCausalLM.from_pretrained(base_model)\n\n# Load peft\nmodel = PeftModel.from_pretrained(model, peft_model)\nmodel = model.eval()\n\n# Generate code for a note-taking application\nnote_app_code = model.generate_note_app_code(max_length=500)\n\n# Print generated note-taking application code\nprint(note_app_code)",
        "instruction": "Develop a Python program using the 'peft' API to generate code for a basic note-taking application. Utilize the 'gpt-3.5-turbo' model for code generation. The program should generate code for a note-taking application that allows users to create, edit, and organize notes.",
        "prediction": ":from transformers import AutoTokenizer, AutoModelForCausalLM\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\nimport torch\n\n# Load Models\nbase_model = \"gpt-3.5-turbo\"\npeft_model = \"gpt-3.5-turbo\"\ntokenizer = AutoTokenizer.from_pretrained(base_model)\nmodel = AutoModelForCausalLM.from_pretrained(base_model)\n\n# Generate code for a basic note-taking application\nnote_taking_code = model.generate_code(max_length=500)\n\n# Print generated note-taking application code\nprint(note_taking_code)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program using the 'peft' API to generate code for a basic note-taking application. Utilize the 'gpt-3.5-turbo' model for code generation. The program should generate code for a note-taking application that allows users to create, edit, and organize notes.\n\n### Response:"
    },
    {
        "api": "peft",
        "decoder_input_ids": true,
        "ground-truth": "# Install necessary libraries\n#!pip install transformers\n#!pip install peft\n\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\nfrom peft import PeftModel\n\n# Load Models\nbase_model = \"gpt2\"\npeft_model = \"gpt2\"\ntokenizer = AutoTokenizer.from_pretrained(base_model)\nmodel = AutoModelForCausalLM.from_pretrained(base_model)\n\n# Load peft\nmodel = PeftModel.from_pretrained(model, peft_model)\nmodel = model.eval()\n\n# Starting phrase\nstarting_phrase = \"To be or not to be, that is the\"\n\n# Generate text\ngenerated_text = model.generate_text(starting_phrase, max_length=200)\n\n# Print generated text\nprint(generated_text)",
        "instruction": "Create a Python program using the 'peft' API to generate text in the style of William Shakespeare. Utilize the 'gpt2' model for text generation. The program should take a starting phrase and generate a coherent and Shakespearean-style text.",
        "prediction": ":import peft\nimport transformers\n\n# Load Models\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\n\n# Load Models\nmodel = AutoModelForCausalLM.from_pretrained(\"./gpt2\")\ntokenizer = AutoTokenizer.from_pretrained(\"./gpt2\")\n\n# Starting phrase\nstarting_phrase = \"The sky is blue and sky\"\n\n# Generate a coherent and Shakespearean-style text\npeft_style_text = peft.generate_coherent_and_shakespearean_style_text(starting_phrase, model, tokenizer)\n\n# Print generated coherent and Shakespeareanan-style text\nprint(peft_style_text)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'peft' API to generate text in the style of William Shakespeare. Utilize the 'gpt2' model for text generation. The program should take a starting phrase and generate a coherent and Shakespearean-style text.\n\n### Response:"
    },
    {
        "api": "plotly",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install plotly\nimport plotly.graph_objects as go\n\n# Define data points for the x and y axes\nx = [1, 2, 3, 4, 5]\ny = [10, 16, 5, 11, 8]\n\n# Define color values for each data point\ncolor = [1, 2, 3, 4, 5]\n\n# Create a scatter plot with a color scale using Plotly Graph Objects\nfig = go.Figure(data=go.Scatter(x=x, y=y, mode='markers', marker=dict(color=color, colorscale='Viridis', showscale=True)))\nfig.update_layout(title=\"Scatter Plot with Color Scale\", xaxis_title=\"X-axis\", yaxis_title=\"Y-axis\")\n\n# Save the chart as a PDF file\nfig.write_image(\"scatter_plot_with_color_scale.pdf\")\n\n# Display the chart on the screen\nfig.show()\n",
        "instruction": "Create a Python program using the 'plotly' API to generate a scatter plot with a color scale. The program should define data points for the x and y axes, as well as the color values for each data point. The program should create the scatter plot with a color scale, customize the chart title, X-axis label, and Y-axis label, and display the color scale on the chart. Finally, save the chart as a PDF file and display it on the screen.",
        "prediction": ":import plotly.graph_objects as go\n\n# Define data points for the x and y axes\nx = [1, 2, 3, 4, 5]\ny = [10, 16, 5, 11, 8]\n\n# Define color values for each data point\ncolor = [1, 2, 3, 4, 5]\n\n# Create a scatter plot with a color scale using Plotly Graph Objects\nfig = go.Figure(data=go.Scatter(x=x, y=y, mode='markers', marker=dict(color=color, colorscale='Viridis', showscale=True)))\nfig.update_layout(title=\"Scatter Plot with Color Scale\", xaxis_title=\"X-axis\", yaxis_title=\"Y-axis\")\n\n# Save the chart as a PDF file\nfig.write_image(\"scatter_plot_with_color_scale.pdf\")\n\n# Display the chart on the screen\nfig.show()\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'plotly' API to generate a scatter plot with a color scale. The program should define data points for the x and y axes, as well as the color values for each data point. The program should create the scatter plot with a color scale, customize the chart title, X-axis label, and Y-axis label, and display the color scale on the chart. Finally, save the chart as a PDF file and display it on the screen.\n\n### Response:"
    },
    {
        "api": "plotly",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install plotly\nimport plotly.graph_objects as go\n\n# Define data points for the x, y, and z axes\nx = [1, 2, 3, 4, 5]\ny = [10, 16, 5, 11, 8]\nz = [7, 3, 9, 5, 2]\n\n# Define the size of the bubbles\nsize = [30, 50, 20, 40, 10]\n\n# Create a bubble chart using Plotly Graph Objects\nfig = go.Figure(data=go.Scatter(x=x, y=y, mode='markers', marker=dict(size=size)))\nfig.update_layout(title=\"Bubble Chart\", xaxis_title=\"X-axis\", yaxis_title=\"Y-axis\")\n\n# Save the chart as a PNG image file\nfig.write_image(\"bubble_chart.png\")\n\n# Display the chart on the screen\nfig.show()\n",
        "instruction": "Create a Python program using the 'plotly' API to generate a bubble chart. The program should define data points for the x, y, and z axes, create the chart, customize the chart title, X-axis label, Y-axis label, and size of the bubbles. Finally, save the chart as a PNG image file and display it on the screen.",
        "prediction": ":import plotly\n_def plot_ly_bubble_chart():\n    # Define data points for the x, y, and z axes\n    x = [1, 2, 3, 4, 5]\n    y = [10, 16, 5, 11, 8]\n    z = [5, 8, 3, 6, 9]\n    # Create a bubble chart using Plotly Graph Objects\n    fig = plotly.graph_objects.Figure()\n    fig.update_layout(title=\"Bubble Chart\", xaxis_title=\"X-axis\", yaxis_title=\"Y-axis\", barmode='relative', bargroupgap=0.1, barmode='group', bargap=0.3)\n    fig.update_traces(\n        marker=plotly.graph_objects.scatter.Marker(size=10, line=plotly.graph_objects.scatter.marker.Line(width=1)),\n        mode='markers',\n        # Define the data points for the x, y, and z axes\n        x=x,\n        y=y,\n        z=z)\n    # Save the chart as a PNG image file\n    fig.write_image(\"bubble_chart.png\")\n    # Display the chart on the screen\n    fig.show()\n\nprint(\"Printing Bubble Chart using Plotly Graph Objects\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(\"\")",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'plotly' API to generate a bubble chart. The program should define data points for the x, y, and z axes, create the chart, customize the chart title, X-axis label, Y-axis label, and size of the bubbles. Finally, save the chart as a PNG image file and display it on the screen.\n\n### Response:"
    },
    {
        "api": "plotly",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install plotly\nimport plotly.graph_objects as go\n\n# Define data points for the x and y axes\nx = [1, 2, 3, 4, 5]\ny = [10, 16, 5, 11, 8]\n\n# Define error values for each data point\nerror = [1, 2, 0.5, 1.5, 1]\n\n# Create a scatter plot with error bars using Plotly Graph Objects\nfig = go.Figure(data=go.Scatter(x=x, y=y, mode='markers', error_y=dict(type='data', array=error, visible=True)))\nfig.update_layout(title=\"Scatter Plot with Error Bars\", xaxis_title=\"X-axis\", yaxis_title=\"Y-axis\")\n\n# Save the chart as a PDF file\nfig.write_image(\"scatter_plot_with_error_bars.pdf\")\n\n# Display the chart on the screen\nfig.show()\n",
        "instruction": "Create a Python program using the 'plotly' API to generate a scatter plot with error bars. The program should define data points for the x and y axes, as well as the error values for each data point. The program should create the scatter plot with error bars, customize the chart title, X-axis label, and Y-axis label, and display the error bars on the chart. Finally, save the chart as a PDF file and display it on the screen.",
        "prediction": ":import plotly.graph_objects as go\n\n# Define data points for the x and y axes\nx = [1, 2, 3, 4, 5]\ny = [10, 16, 5, 11, 8]\n\n# Define error values for each data point\nerror = [1, 2, 0.5, 1.5, 1]\n\n# Create a scatter plot with error bars using Plotly Graph Objects\nfig = go.Figure(data=go.Scatter(x=x, y=y, mode='markers', error_y=dict(type='data', array=error, visible=True)))\nfig.update_layout(title=\"Scatter Plot with Error Bars\", xaxis_title=\"X-axis\", yaxis_title=\"Y-axis\")\n\n# Save the chart as a PDF file\nfig.write_image(\"scatter_plot_with_error_bars.pdf\")\n\n# Display the chart on the screen\nfig.show()\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'plotly' API to generate a scatter plot with error bars. The program should define data points for the x and y axes, as well as the error values for each data point. The program should create the scatter plot with error bars, customize the chart title, X-axis label, and Y-axis label, and display the error bars on the chart. Finally, save the chart as a PDF file and display it on the screen.\n\n### Response:"
    },
    {
        "api": "plotly",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install plotly\nimport plotly.graph_objects as go\n\n# Define data points for the locations and values\nlocations = ['USA', 'Canada', 'Mexico']\nvalues = [10, 5, 7]\n\n# Create a choropleth map using Plotly Graph Objects\nfig = go.Figure(data=go.Choropleth(locations=locations, z=values, locationmode='country names'))\nfig.update_layout(title=\"Choropleth Map\")\n\n# Save the map as an HTML file\nfig.write_html(\"choropleth_map.html\")\n\n# Display the map on the screen\nfig.show()\n",
        "instruction": "Create a Python program using the 'plotly' API to generate a choropleth map. The program should define data points for the locations and values, create the map, customize the map title, and display the data points on the map. Finally, save the map as an HTML file and display it on the screen.",
        "prediction": ":import plotly.graph_objects as go\n\n# Define data points for the locations and values\nlocations = ['A', 'B', 'C', 'D', 'E']\nvalues = [10, 16, 5, 11, 8]\n\n# Create a map using Plotly Graph Objects\nfig = go.Figure(data=go.Choropleth(\n    autocolorscale=False,  # Disable the ability to scale the colors of the map\n    coloraxis=None,  # Create no default coloraxis for the map\n    colorbar=None,  # Create no default colorbar for the map\n    colorscale='Rainbow',  # Display the map using a choropleth map\n    customdata=values,  # Display the data points on the map\n    hovertemplate=\"Location: %{location} <br>Value: %{customdata}\",  # Create the map title\n    locations=locations,  # Define the locations and values, in this case, the locations and values are the same\n    text=\"Text\",  # Display the data points on the map\n    z=values,  # Display the data points on the map\n    zauto=False,  # Disable the ability to automatically calculate the data points for the locations\n))\n\n# Customize the map title\nfig.update_layout(title=\"Choropleth Map\")\n\n# Save the map as an HTML file\nfig.write_html(\"choropleth_map.html\")\n\n# Display the map\nfig.show()\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'plotly' API to generate a choropleth map. The program should define data points for the locations and values, create the map, customize the map title, and display the data points on the map. Finally, save the map as an HTML file and display it on the screen.\n\n### Response:"
    },
    {
        "api": "polars",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install polars\nimport polars as pl\n\n# Load a sample CSV file into a Polars DataFrame\ndata = pl.read_csv(\"sample_data.csv\")\n\n# Filter rows\nfiltered_data = data.filter(data['country'] == 'Canada')\n\n# Select specific columns\nselected_columns = filtered_data.select(['name', 'age', 'country'])\n\n# Calculate the maximum age\nmax_age = selected_columns['age'].max()\n\n# Display the resulting maximum age\nprint(max_age)\n",
        "instruction": "Create a Python program using the 'polars' API to load a sample CSV file into a Polars DataFrame, filter rows where the 'country' column is 'Canada', select specific columns ('name', 'age', 'country'), and calculate the maximum age. Finally, display the resulting maximum age.",
        "prediction": ":import polars as pl\nimport polars as pl\n\n# Load a sample CSV file into a Polars DataFrame\ndata = pl.read_csv(\"sample_data.csv\")\n\n# Filter rows\nfiltered_data = data.filter(data['country'] == 'Canada')\n\n# Select specific columns\nselected_columns = filtered_data.select(['name', 'age', 'country'])\n\n# Calculate the maximum age\nmax_age = selected_columns['age'].max()\n\n# Display the resulting maximum age\nprint(max_age)\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'polars' API to load a sample CSV file into a Polars DataFrame, filter rows where the 'country' column is 'Canada', select specific columns ('name', 'age', 'country'), and calculate the maximum age. Finally, display the resulting maximum age.\n\n### Response:"
    },
    {
        "api": "polars",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install polars\nimport polars as pl\n\n# Load a sample CSV file into a Polars DataFrame\ndata = pl.read_csv(\"sample_data.csv\")\n\n# Filter rows\nfiltered_data = data.filter(data['country'] == 'USA')\n\n# Select specific columns\nselected_columns = filtered_data.select(['name', 'age', 'country'])\n\n# Calculate the average age\naverage_age = selected_columns['age'].mean()\n\n# Display the resulting average age\nprint(average_age)\n",
        "instruction": "Create a Python program using the 'polars' API to load a sample CSV file into a Polars DataFrame, filter rows where the 'country' column is 'USA', select specific columns ('name', 'age', 'country'), and calculate the average age. Finally, display the resulting average age.",
        "prediction": ":import polars as pl\nimport polars as pl\n\n# Load a sample CSV file into a Polars DataFrame\ndata = pl.read_csv(\"sample_data.csv\")\n\n# Filter rows\nfiltered_data = data.filter(data['country'] == 'USA')\n\n# Select specific columns\nselected_columns = filtered_data.select(['name', 'age', 'country'])\n\n# Calculate the average age\naverage_age = selected_columns['age'].mean()\n\n# Display the resulting average age\nprint(average_age)\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'polars' API to load a sample CSV file into a Polars DataFrame, filter rows where the 'country' column is 'USA', select specific columns ('name', 'age', 'country'), and calculate the average age. Finally, display the resulting average age.\n\n### Response:"
    },
    {
        "api": "polars",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install polars\nimport polars as pl\n\n# Load a sample CSV file into a Polars DataFrame\ndata = pl.read_csv(\"sample_data.csv\")\n\n# Filter rows\nfiltered_data = data.filter(data['score'] > 80)\n\n# Select specific columns\nselected_columns = filtered_data.select(['name', 'score', 'grade'])\n\n# Calculate the average score\naverage_score = selected_columns['score'].mean()\n\n# Display the resulting average score\nprint(average_score)\n",
        "instruction": "Create a Python program using the 'polars' API to load a sample CSV file into a Polars DataFrame, filter rows where the 'score' column is greater than 80, select specific columns ('name', 'score', 'grade'), and calculate the average score. Finally, display the resulting average score.",
        "prediction": ":import polars as pl\nimport polars as pl\n\n# Load a sample CSV file into a Polars DataFrame\ndata = pl.read_csv(\"sample_data.csv\")\n\n# Filter rows\nfiltered_data = data.filter(data['score'] > 80)\n\n# Select specific columns\nselected_columns = filtered_data.select(['name','score', 'grade'])\n\n# Calculate the average score\naverage_score = selected_columns['score'].mean()\n\n# Display the resulting average score\nprint(average_score)\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'polars' API to load a sample CSV file into a Polars DataFrame, filter rows where the 'score' column is greater than 80, select specific columns ('name', 'score', 'grade'), and calculate the average score. Finally, display the resulting average score.\n\n### Response:"
    },
    {
        "api": "polars",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install polars\nimport polars as pl\n\n# Load a sample CSV file into a Polars DataFrame\ndata = pl.read_csv(\"sample_data.csv\")\n\n# Filter rows\nfiltered_data = data.filter(data['city'] == 'Toronto')\n\n# Select specific columns\nselected_columns = filtered_data.select(['name', 'age', 'city'])\n\n# Calculate the minimum age\nmin_age = selected_columns['age'].min()\n\n# Display the resulting minimum age\nprint(min_age)\n",
        "instruction": "Create a Python program using the 'polars' API to load a sample CSV file into a Polars DataFrame, filter rows where the 'city' column is 'Toronto', select specific columns ('name', 'age', 'city'), and calculate the minimum age. Finally, display the resulting minimum age.",
        "prediction": ":import polars as pl\nimport polars as pl\n\n# Load a sample CSV file into a Polars DataFrame\ndata = pl.read_csv(\"sample_data.csv\")\n\n# Filter rows\nfiltered_data = data.filter(data['city'] == 'Toronto')\n\n# Select specific columns\nselected_columns = filtered_data.select(['name', 'age', 'city'])\n\n# Calculate the minimum age\nmin_age = selected_columns['age'].min()\n\n# Display the resulting minimum age\nprint(min_age)\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'polars' API to load a sample CSV file into a Polars DataFrame, filter rows where the 'city' column is 'Toronto', select specific columns ('name', 'age', 'city'), and calculate the minimum age. Finally, display the resulting minimum age.\n\n### Response:"
    },
    {
        "api": "pyglove",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install pyglove\nimport pyglove as pg\nimport networkx as nx\n\ndef load_and_analyze_network():\n  # Replace this with your code to load and analyze a network\n  # The example below creates a simple social network and computes network statistics\n  G = nx.Graph()\n  G.add_edges_from([(1, 2), (2, 3), (3, 4), (4, 5), (5, 1)])\n\n  num_nodes = G.number_of_nodes()\n  num_edges = G.number_of_edges()\n  average_degree = sum(dict(G.degree()).values()) / num_nodes\n  network_density = nx.density(G)\n\n  return num_nodes, num_edges, average_degree, network_density\n\nif __name__ == '__main__':\n  num_nodes, num_edges, average_degree, network_density = load_and_analyze_network()\n\n  print(f'Number of Nodes: {num_nodes}')\n  print(f'Number of Edges: {num_edges}')\n  print(f'Average Degree: {average_degree:.2f}')\n  print(f'Network Density: {network_density:.2f}')\n",
        "instruction": "Create a Python program using the 'pyglove' API to perform network analysis. The program should analyze a network (e.g., social network or computer network) by loading a dataset, applying network analysis techniques, and outputting relevant statistics or insights. Additionally, provide a unit test that verifies the accuracy of the network analysis results.",
        "prediction": ":!pip install pyglove\nimport pyglove as pg\nimport pandas as pd\n\ndef network_analysis_network_analysis_results(request):\n    # Load the dataset\n    data = pg.dataset.retail()\n    \n    # Apply network analysis techniques\n    category_filters = ['Office Supplies']\n    category_filters = ['Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']\n    category_filters = ['Tobacco products', 'Office Supplies']",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'pyglove' API to perform network analysis. The program should analyze a network (e.g., social network or computer network) by loading a dataset, applying network analysis techniques, and outputting relevant statistics or insights. Additionally, provide a unit test that verifies the accuracy of the network analysis results.\n\n### Response:"
    },
    {
        "api": "pyglove",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install pyglove\nimport pyglove as pg\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.decomposition import LatentDirichletAllocation\nimport numpy as np\n\ndef download_and_preprocess_documents():\n  # Replace this with your code to download and preprocess a collection of text documents\n  documents = [\n    \"This is the first document.\",\n    \"This document is the second document.\",\n    \"And this is the third one.\",\n    \"Is this the first document?\"\n  ]\n  return documents\n\ndef apply_lda(documents, num_topics=5):\n  # Convert documents to document-term matrix\n  vectorizer = CountVectorizer()\n  dtm = vectorizer.fit_transform(documents)\n\n  # Apply Latent Dirichlet Allocation\n  lda = LatentDirichletAllocation(n_components=num_topics, random_state=0)\n  lda.fit(dtm)\n\n  return vectorizer, lda\n\ndef extract_topics_and_words(vectorizer, lda, num_words=10):\n  feature_names = vectorizer.get_feature_names_out()\n  topics = []\n  for topic_idx, topic in enumerate(lda.components_):\n    top_words_idx = topic.argsort()[:-num_words - 1:-1]\n    top_words = [feature_names[i] for i in top_words_idx]\n    topics.append({'topic': topic_idx, 'words': top_words})\n  return topics\n\nif __name__ == '__main__':\n  documents = download_and_preprocess_documents()\n  num_topics = 3\n  vectorizer, lda = apply_lda(documents, num_topics)\n  topics = extract_topics_and_words(vectorizer, lda)\n\n  for topic in topics:\n    print(f'Topic {topic[\"topic\"]}: {\", \".join(topic[\"words\"])}')\n",
        "instruction": "Create a Python program using the 'pyglove' API to perform topic modeling on a collection of text documents. The program should download and preprocess a collection of text documents, apply Latent Dirichlet Allocation (LDA) to the documents, and output the topics and their associated words. Additionally, provide a unit test that verifies the presence of topics and associated words in the output.",
        "prediction": ":import pyglove\nimport glove as gl\n\ndef download_and_preprocess_text_documents():\n  # Download and preprocess a collection of text documents\n  text_collection = input('Enter the collection of text documents: ')\n  text_collection.download_and_preprocess_the_text_documents()\n\ndef perform_topic_modeling_on_the_text_documents():\n  # Compute topic modeling\n  input_array = input('Enter the input array: ')\n  input_array.compute_topic_modeling()\n\nglove = gl.Glove()\nglove.add_collection(\n    'text_collection',\n    reduce_to_2_dims=True\n)\nglove.perform_topic_modeling_on_the_text_documents()",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'pyglove' API to perform topic modeling on a collection of text documents. The program should download and preprocess a collection of text documents, apply Latent Dirichlet Allocation (LDA) to the documents, and output the topics and their associated words. Additionally, provide a unit test that verifies the presence of topics and associated words in the output.\n\n### Response:"
    },
    {
        "api": "pymc",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install pymc arviz\nfrom pymc import HalfCauchy, Model, Normal, sample\nimport arviz as az\nimport numpy as np\n\nrng = np.random.default_rng(8927)\nsize = 200\ntrue_intercept = 1\ntrue_slope = 2\n\nx = np.linspace(0, 1, size)\n# y = a + b*x\ntrue_regression_line = true_intercept + true_slope * x\n# add noise\ny = true_regression_line + rng.normal(scale=0.5, size=size)\n\n\nwith Model() as model:  \n    # Define priors\n    sigma = HalfCauchy(\"sigma\", beta=10)\n    intercept = Normal(\"Intercept\", 0, sigma=20)\n    slope = Normal(\"slope\", 0, sigma=20)\n\n    # Define likelihood\n    likelihood = Normal(\"y\", mu=intercept + slope * x, sigma=sigma, observed=y)\n\n    # Inference!\n    # draw 30 posterior samples using NUTS sampling\n    idata = sample(30)\n\nprint(\"30 posterior samples using NUTS sampling: \")\nprint(az.summary(idata, round_to=2))",
        "instruction": "Create a Python program using the 'pymc' API to perform Bayesian linear regression on a dataset. The program should define prior distributions for the model's parameters, including the intercept and slope, and use a likelihood function to model the observed data. After setting up the model, perform Bayesian inference to draw posterior samples using NUTS sampling.",
        "prediction": ":import pymc as pm\nimport pymc as pm\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom='sample.csv'\n\n# as shape, intercept and slope!\nwith open(filename) as f:\n    true_intercept = np.array([row.split(',') for row in f.read().split('\\n')])\n    true_intercept = true_intercept[:,0]\n    true_intercept = true_intercept[true_intercept!= 'x']\n    true_intercept = np.array([float(x) for x in true_intercept])\n    true_slope = np.array([row.split(',') for row in f.read().split('\\n')])\n    true_slope = true_slope[:,1]\n    true_slope = true_slope[true_slope!= 'x']\n    true_slope = np.array([float(x) for x in true_slope])\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept = 0\ntrue_slope = 1\n\n# as intercept and slope\nN = 100\ntrue_intercept =",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'pymc' API to perform Bayesian linear regression on a dataset. The program should define prior distributions for the model's parameters, including the intercept and slope, and use a likelihood function to model the observed data. After setting up the model, perform Bayesian inference to draw posterior samples using NUTS sampling.\n\n### Response:"
    },
    {
        "api": "pymc",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install pymc arviz\nfrom pymc import Model, Normal, sample\nimport arviz as az\nimport numpy as np\n\nrng = np.random.default_rng(8927)\nsize = 100\ntrue_mean = 0\ntrue_std = 1\n\n# Simulate observed continuous outcomes\noutcomes = rng.normal(true_mean, true_std, size=size)\n\nwith Model() as model:\n    # Define prior\n    mean = Normal(\"mean\", mu=0, sigma=10)\n    std = Normal(\"std\", mu=1, sigma=10)\n\n    # Define likelihood\n    likelihood = Normal(\"likelihood\", mu=mean, sigma=std, observed=outcomes)\n\n    # Inference!\n    # draw 1000 posterior samples using Hamiltonian Monte Carlo (HMC) sampling\n    idata = sample(1000, tune=500)\n\nprint(\"1000 posterior samples using Hamiltonian Monte Carlo (HMC) sampling: \")\nprint(az.summary(idata, round_to=2))",
        "instruction": "Create a Python program using the 'pymc' API to perform Bayesian inference on a dataset of observed continuous outcomes. The program should define a prior distribution for the mean and standard deviation, and use a likelihood function to model the observed outcomes. After setting up the model, perform Bayesian inference to draw posterior samples using Hamiltonian Monte Carlo (HMC) sampling.",
        "prediction": ":import pymc as pm\nfrom pymc import Model, Normal, sample\nimport numpy as np\n\nrng = np.random.default_rng(8927)\nsize = 100\ntrue_mean = 0\ntrue_std = 1\n\n# Simulate observed continuous outcomes\noutcomes = rng.normal(true_mean, true_std, size=size)\n\nwith Model() as model:\n    # Define prior\n    mean = Normal(\"mean\", mu=0, sigma=10)\n    std = Normal(\"std\", mu=1, sigma=10)\n\n    # Define likelihood\n    likelihood = Normal(\"likelihood\", mu=mean, sigma=std, observed=outcomes)\n\n    # Inference!\n    # draw 1000 posterior samples using Hamiltonian Monte Carlo (HMC) sampling\n    idata = sample(1000, tune=500, step=pm.HMC(likelihood=likelihood), start=, progressbar=)\n\nprint(\"1000 posterior samples using Hamiltonian Monte Carlo (HMC) sampling: \")\nprint(idata)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'pymc' API to perform Bayesian inference on a dataset of observed continuous outcomes. The program should define a prior distribution for the mean and standard deviation, and use a likelihood function to model the observed outcomes. After setting up the model, perform Bayesian inference to draw posterior samples using Hamiltonian Monte Carlo (HMC) sampling.\n\n### Response:"
    },
    {
        "api": "pypdf",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install pypdf\nimport pypdf\n\n# Specify the path of the PDF file with embedded files\npdf_file_path = \"document_with_attachments.pdf\"\n\n# Open the PDF file in read-binary mode\nwith open(pdf_file_path, \"rb\") as pdf_file:\n    # Create a PDF reader object\n    pdf_reader = pypdf.PdfReader(pdf_file)\n\n    # Initialize a list to store the names of embedded files\n    embedded_files = []\n\n    # Check if the PDF has file attachments\n    if '/EmbeddedFiles' in pdf_reader.Info:\n        embedded_file_dict = pdf_reader.Info.EmbeddedFiles\n        for key, value in embedded_file_dict.items():\n            embedded_files.append(key)\n\n    # Display the list of embedded files\n    for file_name in embedded_files:\n        print(file_name)\n",
        "instruction": "Create a Python program using the 'pypdf' API to extract and display the list of all embedded files (attachments) in a PDF file.",
        "prediction": ":!pip install pypdf\nimport pypdf\n\n# Specify the path of the PDF file with embedded embedded files\npdf_file_path = \"document_with_embedded_files.pdf\"\n\n# Open the PDF file in read-binary mode\nwith open(pdf_file_path, \"rb\") as pdf_file:\n    # Create a PDF reader object\n    pdf_reader = pypdf.PdfReader(pdf_file)\n\n    # Initialize a list to store embedded files (attachments)\n    embedded_files = []\n\n    # Display the list of embedded files (attachments)\n    print(f\"List of embedded files: {embedded_files}\")\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'pypdf' API to extract and display the list of all embedded files (attachments) in a PDF file.\n\n### Response:"
    },
    {
        "api": "pypdf",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install pypdf\nimport pypdf\n\n# Specify the path of the PDF file to analyze page dimensions\npdf_file_path = \"document.pdf\"\n\n# Open the PDF file in read-binary mode\nwith open(pdf_file_path, \"rb\") as pdf_file:\n    # Create a PDF reader object\n    pdf_reader = pypdf.PdfReader(pdf_file)\n\n    # Initialize a list to store page dimensions and orientation\n    page_info = []\n\n    # Iterate through the pages and extract page dimensions and orientation\n    for page in pdf_reader.pages:\n        page_width = page.MediaBox[2] - page.MediaBox[0]\n        page_height = page.MediaBox[3] - page.MediaBox[1]\n        orientation = \"Portrait\" if page_width <= page_height else \"Landscape\"\n        page_info.append(f\"Page {page.page_number}: {page_width} x {page_height} ({orientation})\")\n\n    # Display the extracted page information\n    for info in page_info:\n        print(info)\n",
        "instruction": "Create a Python program using the 'pypdf' API to extract and display the page dimensions and orientation (portrait or landscape) of each page in a PDF file.",
        "prediction": ":import the pypdf\nimport pypdf\n\n# Specify the path of the PDF file with page dimensions (Example)\npdf_file_path = \"document_with_page_dimensions.pdf\"\n\n# Open the PDF file in read-binary mode\nwith open(pdf_file_path, \"rb\") as pdf_file:\n    # Create a PDF reader object\n    pdf_reader = pypdf.PdfReader(pdf_file)\n\n    # Extract page dimensions\n    page_dimensions = []\n    for page in pdf_reader.pages:\n        page_dimensions.append(page.page_size)\n\n    # Display the page dimensions\n    for page_num, page_page_size in enumerate(page_dimensions):\n        print(f\"Page {page_num + 1}: {page_page_size}\")\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'pypdf' API to extract and display the page dimensions and orientation (portrait or landscape) of each page in a PDF file.\n\n### Response:"
    },
    {
        "api": "pypdf",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install pypdf\nimport pypdf\n\n# Specify the path of the PDF file\npdf_file_path = \"document.pdf\"\n\n# Specify the keyword or title to search for\nsearch_keyword = \"Chapter 3\"\n\n# Open the PDF file in read-binary mode\nwith open(pdf_file_path, \"rb\") as pdf_file:\n    # Create a PDF reader object\n    pdf_reader = pypdf.PdfReader(pdf_file)\n\n    # Initialize variables to track the start and end of the section\n    section_start = None\n    section_end = None\n\n    # Iterate through the pages and find the section based on the keyword\n    for page_num, page in enumerate(pdf_reader.pages, start=1):\n        page_text = page.extract_text()\n        if search_keyword in page_text:\n            if section_start is None:\n                section_start = page_num\n            section_end = page_num\n\n    # Check if the section is found\n    if section_start is not None:\n        # Extract and display the content of the section\n        section_text = \"\"\n        for page_num in range(section_start, section_end + 1):\n            page = pdf_reader.pages[page_num - 1]\n            section_text += page.extract_text()\n        print(section_text)\n    else:\n        print(f\"Section '{search_keyword}' not found.\")\n",
        "instruction": "Create a Python program using the 'pypdf' API to extract and display the content of a specific section (e.g., chapter) from a PDF file based on a keyword or title.",
        "prediction": ":import the pypdf module\nimport pypdf\n\n# Specify the path of the PDF file with section you want extracted\npdf_file_path = \"document.pdf\"\n\n# Open the PDF file in read-binary mode\nwith open(pdf_file_path, \"rb\") as pdf_file:\n    # Create a PDF reader object\n    pdf_reader = pypdf.PdfReader(pdf_file)\n\n    # Initialize a list to store the content of the extracted section\n    extracted_content = []\n\n    # Extract content based on a keyword or title\n    if keyword:\n        # Extract content based on a keyword\n        extracted_content = pdf_reader.Info.Keywords[0]\n    else:\n        # Extract content based on a title\n        for page_num, page in enumerate(pdf_reader.pages):\n            if page_num == 0:\n                continue\n            else:\n                page_text = page.extract_text()\n                if f_title in page_text or f_title in page_text.lower():\n                    break\n\n# Display the extracted content\nprint(extracted_content)}\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'pypdf' API to extract and display the content of a specific section (e.g., chapter) from a PDF file based on a keyword or title.\n\n### Response:"
    },
    {
        "api": "pypdf",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install pypdf\nimport pypdf\n\n# Specify the path of the PDF file\npdf_file_path = \"document.pdf\"\n\n# Specify the page number to extract (e.g., page 3)\npage_number_to_extract = 3\n\n# Open the PDF file in read-binary mode\nwith open(pdf_file_path, \"rb\") as pdf_file:\n    # Create a PDF reader object\n    pdf_reader = pypdf.PdfReader(pdf_file)\n\n    # Check if the specified page number is within the valid range\n    if 1 <= page_number_to_extract <= len(pdf_reader.pages):\n        # Extract and display the content of the specified page\n        page = pdf_reader.pages[page_number_to_extract - 1]\n        page_text = page.extract_text()\n        print(page_text)\n    else:\n        print(\"Page number is out of range.\")\n",
        "instruction": "Create a Python program using the 'pypdf' API to extract and display the content of a specific page (e.g., page 3) from a PDF file.",
        "prediction": ":import pypdf\ndef extract_content(file_path, page_num):\n    import pypdf\n\n# Open the PDF file in read-binary mode\nwith open(file_path, \"rb\") as pdf_file:\n    # Create a PDF reader object\n    pdf_reader = pypdf.PdfReader(pdf_file)\n\n    # Extract the page at specified page_num\n    page_text = pdf_reader.Page(page_num).extract_text()\n    \n    # Display the extracted content\n    print(page_text)\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'pypdf' API to extract and display the content of a specific page (e.g., page 3) from a PDF file.\n\n### Response:"
    },
    {
        "api": "pytorch-lightning",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install pytorch-lightning\nimport torch\nimport pytorch_lightning as pl\n\nfrom datasets import load_dataset\nfrom transformers import AutoTokenizer\n\n\nclass DataModule(pl.LightningDataModule):\n    def __init__(\n        self,\n        model_name=\"google/bert_uncased_L-2_H-128_A-2\",\n        batch_size=64,\n        max_length=128,\n    ):\n        super().__init__()\n\n        self.batch_size = batch_size\n        self.max_length = max_length\n        self.tokenizer = AutoTokenizer.from_pretrained(model_name)\n\n    def prepare_data(self):\n        cola_dataset = load_dataset(\"glue\", \"cola\")\n        self.train_data = cola_dataset[\"train\"]\n        self.val_data = cola_dataset[\"validation\"]\n\n    def tokenize_data(self, example):\n        return self.tokenizer(\n            example[\"sentence\"],\n            truncation=True,\n            padding=\"max_length\",\n            max_length=self.max_length,\n        )\n\n    def setup(self, stage=None):\n        if stage == \"fit\" or stage is None:\n            self.train_data = self.train_data.map(self.tokenize_data, batched=True)\n            self.train_data.set_format(\n                type=\"torch\", columns=[\"input_ids\", \"attention_mask\", \"label\"]\n            )\n\n            self.val_data = self.val_data.map(self.tokenize_data, batched=True)\n            self.val_data.set_format(\n                type=\"torch\",\n                columns=[\"input_ids\", \"attention_mask\", \"label\"],\n                output_all_columns=True,\n            )\n\n    def train_dataloader(self):\n        return torch.utils.data.DataLoader(\n            self.train_data, batch_size=self.batch_size, shuffle=True\n        )\n\n    def val_dataloader(self):\n        return torch.utils.data.DataLoader(\n            self.val_data, batch_size=self.batch_size, shuffle=False\n        )\n\n\nif __name__ == \"__main__\":\n    data_model = DataModule()\n    data_model.prepare_data()\n    data_model.setup()\n    print(next(iter(data_model.train_dataloader()))[\"input_ids\"].shape)",
        "instruction": "Create a Python program using the 'pytorch-lightning' API to define a 'DataModule' class that prepares and tokenizes data for a natural language processing task. The 'DataModule' should load a dataset using the 'datasets' and 'transformers' libraries, tokenize the data with a specific model tokenizer, and set up data loaders. The program should demonstrate the use of 'pytorch-lightning' to create a 'DataModule' instance, prepare data, set it up, and print the shape of a batch from the data loader.",
        "prediction": ":import datasets\nimport transformers\nimport torch\n\n# Define a class to prepare and tokenize the data\nclass DataModule(pllightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglightninglight",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'pytorch-lightning' API to define a 'DataModule' class that prepares and tokenizes data for a natural language processing task. The 'DataModule' should load a dataset using the 'datasets' and 'transformers' libraries, tokenize the data with a specific model tokenizer, and set up data loaders. The program should demonstrate the use of 'pytorch-lightning' to create a 'DataModule' instance, prepare data, set it up, and print the shape of a batch from the data loader.\n\n### Response:"
    },
    {
        "api": "pytorch-lightning",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install pytorch-lightning\nimport pytorch_lightning as pl\nimport torch\n\n# Define a custom callback for logging losses\nclass LossLoggingCallback(pl.Callback):\n    def on_epoch_end(self, trainer, pl_module):\n        train_loss = trainer.callback_metrics[\"train_loss_step\"]\n        val_loss = trainer.callback_metrics[\"val_loss_step\"]\n        print(f\"Epoch {trainer.current_epoch}: Train Loss - {train_loss:.4f}, Val Loss - {val_loss:.4f}\")\n\n# Create a LightningModule for demonstration\nclass ExampleModel(pl.LightningModule):\n    def __init__(self):\n        super().__init__()\n        self.l1 = torch.nn.Linear(10, 1)\n\n    def forward(self, x):\n        return self.l1(x)\n\n    def training_step(self, batch, batch_idx):\n        x, y = batch\n        y_hat = self(x)\n        loss = torch.nn.functional.mse_loss(y_hat, y)\n        self.log(\"train_loss_step\", loss)\n        return loss\n\n    def validation_step(self, batch, batch_idx):\n        x, y = batch\n        y_hat = self(x)\n        loss = torch.nn.functional.mse_loss(y_hat, y)\n        self.log(\"val_loss_step\", loss)\n\nif __name__ == \"__main__\":\n    model = ExampleModel()\n\n    trainer = pl.Trainer(\n        gpus=0,\n        max_epochs=5,\n        callbacks=[LossLoggingCallback()],\n    )\n\n    trainer.fit(model)",
        "instruction": "Create a Python program using the 'pytorch-lightning' API to define a custom callback that logs the training loss and validation loss during training. The program should demonstrate the use of this custom callback to monitor and log losses during model training.",
        "prediction": ":import aup\nimport pytorch_lightning as pl\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\n\nfrom pytorch_lightning import _(pl\nLIGHTNING_LIGHTNING!=!}!}!}!}!}!}!}!}!}!}!}!}\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'pytorch-lightning' API to define a custom callback that logs the training loss and validation loss during training. The program should demonstrate the use of this custom callback to monitor and log losses during model training.\n\n### Response:"
    },
    {
        "api": "rapidfuzz",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install rapidfuzz\nfrom rapidfuzz import fuzz, process\n\ntarget_strings = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"]\n\nquery_string = \"cranberry\"\n\nprint(\"Query: \", query_string)\n\nresults = process.extract(query_string, target_strings, scorer=fuzz.WRatio, limit=len(target_strings))\n\nfor result in results:\n    target, score, _ = result\n    token_ratio_score = fuzz.token_ratio(query_string, target)\n    print(f\"{target}: Weighted Ratio Score {score}, Token Ratio Score {token_ratio_score}\")",
        "instruction": "Create a Python program using the 'rapidfuzz' API to demonstrate fuzzy string matching. The program should take a query string and compare it to a list of target strings using the 'fuzz.WRatio' scorer from 'rapidfuzz'. Print the query string and the similarity score for each target string. Additionally, the program should calculate and print the token ratio similarity score for each target string. The goal is to find similar strings in the list based on both the weighted ratio and token ratio similarity scores.",
        "prediction": ":!pip install rapidfuzz\nfrom rapidfuzz import fuzz, process\n\ntarget_strings = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"]\n\nquery_string = \"cranberry\"\n\nprint(\"Query: \", query_string)\n\nresults = process.extract(query_string, target_strings, scorer=fuzz.WRatio, limit=len(target_strings))\n\nfor result in results:\n    target, score, _ = result\n    token_ratio_score = fuzz.token_ ratio(query_string, target)\n    print(f\"{target}: Weighted Ratio Score {score}, Token Ratio Score {token_ratio_score}\")",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'rapidfuzz' API to demonstrate fuzzy string matching. The program should take a query string and compare it to a list of target strings using the 'fuzz.WRatio' scorer from 'rapidfuzz'. Print the query string and the similarity score for each target string. Additionally, the program should calculate and print the token ratio similarity score for each target string. The goal is to find similar strings in the list based on both the weighted ratio and token ratio similarity scores.\n\n### Response:"
    },
    {
        "api": "rapidfuzz",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install rapidfuzz\nfrom rapidfuzz import fuzz, process\n\ntarget_strings = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"]\n\nquery_string = \"cranberry\"\n\nprint(\"Query: \", query_string)\n\nresults = process.extract(query_string, target_strings, scorer=fuzz.WRatio, limit=len(target_strings))\n\nfor result in results:\n    target, score, _ = result\n    token_set_ratio_score = fuzz.token_set_ratio(query_string, target)\n    print(f\"{target}: Weighted Ratio Score {score}, Token Set Ratio Score {token_set_ratio_score}\")",
        "instruction": "Create a Python program using the 'rapidfuzz' API to demonstrate fuzzy string matching. The program should take a query string and compare it to a list of target strings using the 'fuzz.WRatio' scorer from 'rapidfuzz'. Print the query string and the similarity score for each target string. Additionally, the program should calculate and print the token set ratio similarity score for each target string. The goal is to find similar strings in the list based on both the weighted ratio and token set ratio similarity scores.",
        "prediction": ":import rapidfuzz\n\nfrom rapidfuzz import fuzz, process\n\ntarget_strings = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"]\n\nquery_string = \"cranberry\"\n\nprint(\"Query: \", query_string)\n\nresults = process.extract(query_string, target_strings, scorer=fuzz.WRatio, limit=len(target_strings))\n\nfor result in results:\n    target, score, _ = result\n    token_set_ratio_score = fuzz.token_set_ratio(query_string, target)\n    print(f\"{target}: Weighted Ratio Score {score}, Token Set Ratio Score {token_set_ratio_score}\")",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'rapidfuzz' API to demonstrate fuzzy string matching. The program should take a query string and compare it to a list of target strings using the 'fuzz.WRatio' scorer from 'rapidfuzz'. Print the query string and the similarity score for each target string. Additionally, the program should calculate and print the token set ratio similarity score for each target string. The goal is to find similar strings in the list based on both the weighted ratio and token set ratio similarity scores.\n\n### Response:"
    },
    {
        "api": "rich",
        "decoder_input_ids": true,
        "ground-truth": "# Install rich\n#!pip install rich\nfrom rich.console import Console\nfrom rich.table import Table\n\n# Define a list of famous historical quotes\nquotes = [\n    {\n        \"text\": \"Those who cannot remember the past are condemned to repeat it.\",\n        \"author\": \"George Santayana\",\n        \"source\": \"The Life of Reason\",\n    },\n    {\n        \"text\": \"In the end, we will remember not the words of our enemies, but the silence of our friends.\",\n        \"author\": \"Martin Luther King Jr.\",\n        \"source\": \"Strength to Love\",\n    },\n    {\n        \"text\": \"Never interrupt your enemy when he is making a mistake.\",\n        \"author\": \"Napoleon Bonaparte\",\n        \"source\": \"Letter to Charles-Maurice Talleyrand-Perigord\",\n    },\n    {\n        \"text\": \"We must, indeed, all hang together or, most assuredly, we shall all hang separately.\",\n        \"author\": \"Benjamin Franklin\",\n        \"source\": \"In the Continental Congress just before signing the Declaration of Independence\",\n    },\n]\n\n# Create a rich table for famous historical quotes\nconsole = Console()\ntable = Table(title=\"Famous Historical Quotes\", style=\"italic\")\ntable.add_column(\"Quote\", style=\"bold\")\ntable.add_column(\"Author\", style=\"bold\")\ntable.add_column(\"Source\", style=\"bold\")\n\n# Populate the table with quote data\nfor quote in quotes:\n    table.add_row(quote[\"text\"], quote[\"author\"], quote[\"source\"])\n\n# Display the famous historical quotes\nconsole.print(table)\n\n",
        "instruction": "Create a Python program using the 'rich' API to display a colorful and styled list of famous historical quotes. The program should include the quote text, the author, and the source of the quote.",
        "prediction": ":import rich\ndef famous_historical_Quote(text):\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text.el('')\n    text",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'rich' API to display a colorful and styled list of famous historical quotes. The program should include the quote text, the author, and the source of the quote.\n\n### Response:"
    },
    {
        "api": "rich",
        "decoder_input_ids": true,
        "ground-truth": "# Install rich\n#!pip install rich\nimport time\nfrom rich.console import Console\n\n# Create a real-time digital clock\nconsole = Console()\nwhile True:\n    console.clear()\n    current_time = time.strftime(\"%H:%M:%S\")\n    console.print(current_time, style=\"bold yellow on green\")\n    time.sleep(1)\n\n",
        "instruction": "Generate a Python program using the 'rich' API to display a stylish and colored digital clock that shows the current time. The program should update the time every second.",
        "prediction": ":import time\nimport time\nfrom rich.console import Console\nfrom rich.panel import Panel\n\n# Create a real-time digital clock\nconsole = Console()\n\nwhile True:\n    console.clear()\n    current_time = time.strftime(\"%H:%M:%S\")\n    panel = Panel(current_time, style=\"bold\")\n    console.print(panel)\n    time.sleep(1)\n\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program using the 'rich' API to display a stylish and colored digital clock that shows the current time. The program should update the time every second.\n\n### Response:"
    },
    {
        "api": "rich",
        "decoder_input_ids": true,
        "ground-truth": "# Install rich\n#!pip install rich\nfrom rich.console import Console\nfrom rich.table import Table\n\n# Define a list of inspirational quotes\nquotes = [\n    {\n        \"text\": \"The future belongs to those who believe in the beauty of their dreams.\",\n        \"author\": \"Eleanor Roosevelt\",\n        \"source\": \"You Learn by Living: Eleven Keys for a More Fulfilling Life\",\n    },\n    {\n        \"text\": \"The only limit to our realization of tomorrow will be our doubts of today.\",\n        \"author\": \"Franklin D. Roosevelt\",\n        \"source\": \"Great Speeches\",\n    },\n    {\n        \"text\": \"Believe you can and you're halfway there.\",\n        \"author\": \"Theodore Roosevelt\",\n        \"source\": \"Quoted in Half-Hearted Enemies: Nova Scotia Texts\",\n    },\n    {\n        \"text\": \"The greatest glory in living lies not in never falling, but in rising every time we fall.\",\n        \"author\": \"Nelson Mandela\",\n        \"source\": \"Long Walk to Freedom: The Autobiography of Nelson Mandela\",\n    },\n]\n\n# Create a rich table for inspirational quotes\nconsole = Console()\ntable = Table(title=\"Inspirational Quotes\", style=\"italic\")\ntable.add_column(\"Quote\", style=\"bold\")\ntable.add_column(\"Author\", style=\"bold\")\ntable.add_column(\"Source\", style=\"bold\")\n\n# Populate the table with quote data\nfor quote in quotes:\n    table.add_row(quote[\"text\"], quote[\"author\"], quote[\"source\"])\n\n# Display the inspirational quotes\nconsole.print(table)\n\n",
        "instruction": "Generate a Python program using the 'rich' API to display a styled and colorful list of inspirational quotes. The program should include the quote text, the author, and the source of the quote.",
        "prediction": ":import rich\nfrom rich.console import Console\nfrom rich.console import ConsoleDandas\nfrom rich.console import Group\n\n# Define a list of quotes\nquotes = [\n    \"The only way to do a good time in life is to love the life of the moment.\",\n    \"We are all doomed unless we believe, love, and trust the great ones of life.\",\n    \"The only way to do a great time in life is to love the life of the moment.\",\n    \"We are all destined to be great, time-honored, and loved ones, time-honored, source of love.\",\n    \"The only way to be successful in life is to love the life of the moment.\",\n]\n\n# Create a color table for quotes\nconsole = Console()\nconsole.color(\"quote of the day\", style=\"bold\")\n\n# Create a rich table for the quotes\ntable = Table(title=\"Quote of the Day\", style=\"italic\")\ntable.add_column(\"Quote\", style=\"bold\")\ntable.add_column(\"Author\", style=\"bold\")\ntable.add_column(\"Source of Quote\", style=\"bold\")\n\n# Populate the table with quote data\nfor quote in quotes:\n    table.add_row(quote, \"\", \"\", source=quote)\n\n# Display the table as an expanding list\nconsole.print(table)\n\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program using the 'rich' API to display a styled and colorful list of inspirational quotes. The program should include the quote text, the author, and the source of the quote.\n\n### Response:"
    },
    {
        "api": "rich",
        "decoder_input_ids": true,
        "ground-truth": "# Install rich\n#!pip install rich\nimport time\nfrom rich.progress import Progress\n\n# Simulate video rendering process\ndef render_video():\n    for _ in range(100):\n        time.sleep(0.1)\n\n# Create a styled progress bar for video rendering\nwith Progress() as progress:\n    task = progress.add_task(\"[cyan]Rendering video...\", total=100)\n    progress.console.show_cursor(False)\n    \n    # Simulate video rendering and update the progress\n    for _ in range(100):\n        time.sleep(0.1)\n        progress.update(task, completed=1)\n        progress.refresh()\n\n# Display completion message\nprogress.console.show_cursor(True)\nprint(\"[green]Video rendering completed!\")\n\n",
        "instruction": "Generate a Python program using the 'rich' API to display a colorful and styled progress bar that shows the progress of a video rendering process. The program should update the progress as the rendering continues.",
        "prediction": ":import rich\nimport time\n\n# Simulate a video rendering process\ndef render_video():\n    for _ in range(100):\n        time.sleep(0.1)\n        update_progress(progress)\n\n# Create a styled progress bar for the video rendering\nwith rich.panel.Panel(style=\"bold styled progress\") as panel:\n    for _ in range(100):\n        time.sleep(0.1)\n        progress = panel.add_progress(\"[cyan]{}%[/cyan]\".format(int(time.time())), completion=progress)\n        update_progress(progress)\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program using the 'rich' API to display a colorful and styled progress bar that shows the progress of a video rendering process. The program should update the progress as the rendering continues.\n\n### Response:"
    },
    {
        "api": "rustworkx",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install rustworkx\nimport rustworkx as rx\n\ngraph = rx.PyGraph()\n\n# Each time add node is called, it returns a new node index\na = graph.add_node(\"A\")\nb = graph.add_node(\"B\")\nc = graph.add_node(\"C\")\nd = graph.add_node(\"D\")\n\n# add_edges_from takes tuples of node indices and weights,\n# and returns edge indices\nedge_indices = graph.add_edges_from([(a, b, 1.5), (a, d, 2.0), (b, c, 2.5),(d, c, 1.5)])\nprint(edge_indices)\n\n# Returns the path \npath_mapping = rx.dijkstra_shortest_paths(graph, a, c, weight_fn=float)\nprint(path_mapping)",
        "instruction": "Create a Python program using the 'rustworkx' API to define a directed graph and find the shortest path between two nodes. Initialize an empty graph and add nodes 'A,' 'B,' 'C,' and 'D' to it. Establish weighted edges between these nodes and print the indices of the added edges. Then, use Dijkstra's shortest path algorithm to find and print the shortest path from node 'A' to node 'C'",
        "prediction": ":import rustworkx as rx\nimport rustworkx as rx\n\ngraph = rx.PyDiGraph()\n\n# Each time add node is called, it returns a new node index\na = graph.add_node(\"A\")\nb = graph.add_node(\"B\")\nc = graph.add_node(\"C\")\nd = graph.add_node(\"D\")\n\n# add_edges_from takes tuples of node indices and weights,\n# and returns edge indices\nedge_indices = graph.add_edges_from([(a, b, 3), (b, c, 2), (c, d, 1)])\nprint(edge_indices)\n\n# Returns the shortest path between 'A' and 'C',\n# and prints the shortest path from node 'A' to node 'C'\nshortest_path = rx.shortest_path(graph, \"A\", \"C\")\nprint(shortest_path)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'rustworkx' API to define a directed graph and find the shortest path between two nodes. Initialize an empty graph and add nodes 'A,' 'B,' 'C,' and 'D' to it. Establish weighted edges between these nodes and print the indices of the added edges. Then, use Dijkstra's shortest path algorithm to find and print the shortest path from node 'A' to node 'C'\n\n### Response:"
    },
    {
        "api": "rustworkx",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install rustworkx\nimport rustworkx as rx\n\ngraph = rx.PyGraph()\n\n# Each time add node is called, it returns a new node index\na = graph.add_node(\"A\")\nb = graph.add_node(\"B\")\nc = graph.add_node(\"C\")\nd = graph.add_node(\"D\")\n\n# add_edges_from takes tuples of node indices and weights,\n# and returns edge indices\nedge_indices = graph.add_edges_from([(a, b, 1.5), (a, d, 2.0), (b, c, 2.5),(d, c, 1.5)])\nprint(edge_indices)\n\n# Returns the minimum spanning tree\nmst = rx.minimum_spanning_tree(graph, weight_fn=float)\nprint(mst)",
        "instruction": "Create a Python program using the 'rustworkx' API to define an undirected graph and find the minimum spanning tree. Initialize an empty graph and add nodes 'A,' 'B,' 'C,' and 'D' to it. Establish weighted edges between these nodes and print the indices of the added edges. Then, use Kruskal's algorithm to find and print the minimum spanning tree of the graph.",
        "prediction": ":import rustworkx\nimport rustworkx as rx\n\ngraph = rx.PyGraph()\n\n# Each time add node is called, it returns a new node index\na = graph.add_node(\"A\")\nb = graph.add_node(\"B\")\nc = graph.add_node(\"C\")\nd = graph.add_node(\"D\")\n\n# add_edges_from takes tuples of node indices and weights,\n# and returns edge indices\nedge_indices = graph.add_edges_from([(a, b), (b, c), (c, d)])\nprint(edge_indices)\n\n# Returns the minimum spanning tree of the graph\nmin_span_tree = rx.min_span_tree(graph)\nprint(min_span_tree)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'rustworkx' API to define an undirected graph and find the minimum spanning tree. Initialize an empty graph and add nodes 'A,' 'B,' 'C,' and 'D' to it. Establish weighted edges between these nodes and print the indices of the added edges. Then, use Kruskal's algorithm to find and print the minimum spanning tree of the graph.\n\n### Response:"
    },
    {
        "api": "scikit-learn",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install scikit-learn\nimport joblib\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import fetch_lfw_people\nfrom sklearn.tree import DecisionTreeClassifier\n\n#Load the LFW dataset\nlfw = fetch_lfw_people(min_faces_per_person=70, resize=0.4)\nX, y = lfw.data, lfw.target\n\n#Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n#Initialize the Decision Tree classifier\ndt_classifier = DecisionTreeClassifier()\n\n#Train the classifier\ndt_classifier.fit(X_train, y_train)\n\n#Make predictions\ny_pred = dt_classifier.predict(X_test)\n\n#Calculate accuracy\naccuracy = (y_pred == y_test).mean()\nprint(f'Accuracy: {accuracy:.2f}')\n\n#Serialize and save the model\njoblib.dump(dt_classifier, 'lfw_classifier.pkl')\n",
        "instruction": "Create a Python program that uses the 'scikit-learn' API to load the LFW (Labeled Faces in the Wild) dataset, split it into training and testing sets, train a Decision Tree classifier, make predictions, calculate accuracy, and save the trained model.",
        "prediction": ":import joblib\nimport joblib\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import fetch_lfw_people\nfrom sklearn.metrics import accuracy_score\n\n#Load the LFW dataset\nlfw = fetch_lfw_people(min_faces_per_person=70, resize=0.4)\nX, y = lfw.data, lfw.target\n\n#Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n#Initialize the Decision Tree classifier\ndt_classifier = DecisionTreeClassifier(max_depth=9, min_samples_leaf=1)\n\n#Train the classifier\ndt_classifier.fit(X_train, y_train)\n\n#Make predictions\ny_pred = dt_classifier.predict(X_test)\n\n#Calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\n\n#Serialize and save the model\njoblib.dump(dt_classifier, 'lfw_classifier.pkl')\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses the 'scikit-learn' API to load the LFW (Labeled Faces in the Wild) dataset, split it into training and testing sets, train a Decision Tree classifier, make predictions, calculate accuracy, and save the trained model.\n\n### Response:"
    },
    {
        "api": "scikit-learn",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install scikit-learn\nimport joblib\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import fetch_lfw_people\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Load the LFW dataset\nlfw = fetch_lfw_people(min_faces_per_person=70, resize=0.4)\nX, y = lfw.data, lfw.target\n\n#Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n#Initialize the Random Forest classifier\nrf_classifier = RandomForestClassifier(n_estimators=100)\n\n#Train the classifier\nrf_classifier.fit(X_train, y_train)\n\n#Make predictions\ny_pred = rf_classifier.predict(X_test)\n\n#Calculate accuracy\naccuracy = (y_pred == y_test).mean()\nprint(f'Accuracy: {accuracy:.2f}')\n\n#Serialize and save the model\njoblib.dump(rf_classifier, 'lfw_classifier.pkl')\n",
        "instruction": "Create a Python program that uses the 'scikit-learn' API to load the LFW (Labeled Faces in the Wild) dataset, split it into training and testing sets, train a Random Forest classifier, make predictions, calculate accuracy, and save the trained model.",
        "prediction": ":import scikit-learn\nimport joblib\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import fetch_lfw_people\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Load the LFW dataset\nlfw = fetch_lfw_people(min_faces_per_person=70, resize=0.4)\nX, y = lfw.data, lfw.target\n\n#Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n#Initialize the Random Forest classifier\nrf_classifier = RandomForestClassifier(n_estimators=10)\n\n#Train the classifier\nrf_classifier.fit(X_train, y_train)\n\n#Make predictions\ny_pred = rf_classifier.predict(X_test)\n\n#Calculate accuracy\naccuracy = (y_pred == y_test).mean()\nprint(f'Accuracy: {accuracy:.2f}')\n\n#Serialize and save the model\njoblib.dump(rf_classifier, 'lfw_classifier.pkl')\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses the 'scikit-learn' API to load the LFW (Labeled Faces in the Wild) dataset, split it into training and testing sets, train a Random Forest classifier, make predictions, calculate accuracy, and save the trained model.\n\n### Response:"
    },
    {
        "api": "scikit-learn",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install scikit-learn\nimport joblib\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.neighbors import KNeighborsClassifier\n\n#Load the Breast Cancer dataset\nbreast_cancer = load_breast_cancer()\nX, y = breast_cancer.data, breast_cancer.target\n\n#Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n#Initialize the K-Nearest Neighbors classifier\nknn_classifier = KNeighborsClassifier(n_neighbors=3)\n\n#Train the classifier\nknn_classifier.fit(X_train, y_train)\n\n#Make predictions\ny_pred = knn_classifier.predict(X_test)\n\n#Calculate accuracy\naccuracy = (y_pred == y_test).mean()\nprint(f'Accuracy: {accuracy:.2f}')\n\n#Serialize and save the model\njoblib.dump(knn_classifier, 'breast_cancer_classifier.pkl')\n",
        "instruction": "Create a Python program that uses the 'scikit-learn' API to load the Breast Cancer dataset, split it into training and testing sets, train a K-Nearest Neighbors classifier, make predictions, calculate accuracy, and save the trained model.",
        "prediction": ":import joblib\nimport joblib\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.neighbors import KNeighborsClassifier\n\n#Load the Breast Cancer dataset\nbreast_cancer = load_breast_cancer()\nX, y = breast_cancer.data, breast_cancer.target\n\n#Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n#Initialize the K-Nearest Neighbors classifier\nknn_classifier = KNeighborsClassifier()\n\n#Train the classifier\nknn_classifier.fit(X_train, y_train)\n\n#Make predictions\ny_pred = knn_classifier.predict(X_test)\n\n#Calculate accuracy\naccuracy = (y_pred == y_test).mean()\nprint(f'Accuracy: {accuracy:.2f}')\n\n#Serialize and save the model\njoblib.dump(knn_classifier, 'breast_cancer_classifier.pkl')\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses the 'scikit-learn' API to load the Breast Cancer dataset, split it into training and testing sets, train a K-Nearest Neighbors classifier, make predictions, calculate accuracy, and save the trained model.\n\n### Response:"
    },
    {
        "api": "scikit-learn",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install scikit-learn\nimport joblib\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.cluster import KMeans\n\n#Load the Breast Cancer dataset\nbreast_cancer = load_breast_cancer()\nX, y = breast_cancer.data, breast_cancer.target\n\n#Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n#Initialize the K-Means clustering model\nkmeans = KMeans(n_clusters=2)\n\n#Train the model\nkmeans.fit(X_train)\n\n#Make predictions\ny_pred = kmeans.predict(X_test)\n\n#Serialize and save the model\njoblib.dump(kmeans, 'breast_cancer_kmeans_model.pkl')\n",
        "instruction": "Create a Python program that uses the 'scikit-learn' API to load the Breast Cancer dataset, split it into training and testing sets, train a K-Means clustering model, make predictions, and save the trained model.",
        "prediction": ":import joblib\nimport joblib\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.cluster import KMeans\n\n#Load the Breast Cancer dataset\nbreast_cancer = load_breast_cancer()\nX, y = breast_cancer.data, breast_cancer.target\n\n#Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n#Initialize the K-Means clustering model\nkmeans = KMeans(n_clusters=2)\n\n#Train the model\nkmeans.fit(X_train)\n\n#Make predictions\ny_pred = kmeans.predict(X_test)\n\n#Serialize and save the model\njoblib.dump(kmeans, 'breast_cancer_classifier.pkl')\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses the 'scikit-learn' API to load the Breast Cancer dataset, split it into training and testing sets, train a K-Means clustering model, make predictions, and save the trained model.\n\n### Response:"
    },
    {
        "api": "scipy",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install scipy matplotlib\nimport scipy as sp\nimport matplotlib.pyplot as plt\n\nface = sp.datasets.face(gray=True)\n\nshifted_face = sp.ndimage.shift(face, (50, 50))\nrotated_face = sp.ndimage.rotate(face, 30)\n\nplt.figure(figsize=(15, 3))\nplt.subplot(151)\nplt.imshow(face, cmap=plt.cm.gray)\nplt.axis(\"off\")\n\nplt.subplot(152)\nplt.imshow(shifted_face, cmap=plt.cm.gray)\nplt.axis(\"off\")\n\nplt.subplot(153)\nplt.imshow(rotated_face, cmap=plt.cm.gray)\nplt.axis(\"off\")\n\nplt.subplots_adjust(wspace=0.05, left=0.01, bottom=0.01, right=0.99, top=0.99)\n\nplt.show()",
        "instruction": "Create a Python program using the 'scipy' API to apply various image transformations to a sample image. The program should perform operations like shifting and rotating the image and display the original and transformed images.",
        "prediction": ":import scipy as sp\nimport scipy as sp\nimport scipy.ndimage as sp\n\n# Load the image\nimage = sp.ndimage.imread(\"sample.jpg\")\n\n# Shifting and Display the original and transformed images\nshifted_image = sp.ndimage.shift(image, (0, 50))\n\n# Display the original and transformed images\nsp.misc.imsave(\"shifted_image\", shifted_image)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'scipy' API to apply various image transformations to a sample image. The program should perform operations like shifting and rotating the image and display the original and transformed images.\n\n### Response:"
    },
    {
        "api": "scipy",
        "decoder_input_ids": true,
        "ground-truth": "import scipy as sp\nfrom scipy.optimize import minimize\n\n# Define the objective function\ndef objective(x):\n    return x[0]**2 + x[1]**2\n\n# Define the nonlinear inequality constraints\ndef constraint(x):\n    return x[0]**2 + x[1]**2 - 1\n\n# Specify the optimization method\nmethod = 'SLSQP'\n\n# Specify the initial guess for the variables\nx0 = [0, 0]\n\n# Specify the constraints\nconstraints = [{'type': 'ineq', 'fun': constraint}]\n\n# Find the optimal solution with nonlinear inequality constraints\nresult = minimize(objective, x0, method=method, constraints=constraints)\n\n# Display the optimal solution\nprint(\"Optimal solution:\", result.x)",
        "instruction": "Create a Python program using the 'scipy' API to perform numerical optimization with nonlinear inequality constraints. The program should define an objective function to be minimized or maximized, specify the nonlinear inequality constraints, and use the 'scipy.optimize.minimize' function with the 'constraints' parameter to find the optimal solution.",
        "prediction": ":import scipy as sp\nfrom scipy.optimize import minimize\n\n# Define the objective function\ndef objective(x):\n    return x[0]**2 + x[1]**2\n\n# Define the nonlinear inequality constraints\ndef constraint(x):\n    return x[0]**2 + x[1]**2 - 1\n\n# Specify the optimization method\nmethod = 'SLSQP'\n\n# Specify the initial guess for the variables\nx0 = [0, 0]\n\n# Specify the constraints\nconstraints = [{'type': 'ineq', 'fun': constraint}]\n\n# Find the optimal solution with nonlinear inequality constraints\nresult = minimize(objective, x0, method=method, constraints=constraints)\n\n# Display the optimal solution\nprint(\"Optimal solution:\", result.x)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'scipy' API to perform numerical optimization with nonlinear inequality constraints. The program should define an objective function to be minimized or maximized, specify the nonlinear inequality constraints, and use the 'scipy.optimize.minimize' function with the 'constraints' parameter to find the optimal solution.\n\n### Response:"
    },
    {
        "api": "spacy",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install spacy\nimport spacy\n\nnlp = spacy.load(\"en_core_web_sm\")\n\ndef extract_named_entities(text):\n    doc = nlp(text)\n    entities = []\n    for ent in doc.ents:\n        entities.append((ent.text, ent.label_))\n    return entities\n\ntext = \"Apple Inc. is a technology company headquartered in Cupertino, California. Tim Cook is the CEO of Apple.\"\nentities = extract_named_entities(text)\nfor entity in entities:\n    print(entity)",
        "instruction": "Create a Python program using the 'spacy' API to analyze text and extract named entities. The program should identify and label different types of named entities such as persons, organizations, and locations.",
        "prediction": ":import spacy\nfrom spacy.lang.en import English\n\nnlp = English()\n\ndef extract_named_entities(text):\n    doc = nlp(text)\n    entities = []\n    for ent in doc.ents:\n        entities.append((ent.text, ent.label_))\n    return entities\n\ntext = \"Apple Inc. is planning to invest in a new technology for the company.\"\nentities = extract_named_entities(text)\nfor entity in entities:\n    print(entity)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'spacy' API to analyze text and extract named entities. The program should identify and label different types of named entities such as persons, organizations, and locations.\n\n### Response:"
    },
    {
        "api": "spacy",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install spacy\nimport spacy\n\nnlp = spacy.load(\"en_core_web_sm\")\n\ndef sentiment_analysis(text):\n    doc = nlp(text)\n    sentiment = \"Neutral\"\n    # Perform sentiment analysis based on the content of the text\n    # Add your sentiment analysis logic here\n    return sentiment\n\ntext = \"I love this movie!\"\nsentiment = sentiment_analysis(text)\nprint(sentiment)",
        "instruction": "Create a Python program using the 'spacy' API to perform sentiment analysis on a given text. The program should analyze the sentiment of the text and classify it as positive, negative, or neutral.",
        "prediction": ":import spacy\nimport spacy\n\nnlp = spacy.load(\"en_core_web_sm\")\n\ndef sentiment_analysis(text):\n    doc = nlp(text)\n    sentiment = doc.sentiment\n    classification = \"Neutral.\"\n    if sentiment.score > 0.5:\n        classification = \"Positive.\"\n    elif sentiment.score < 0.5:\n        classification = \"Negative.\"\n    print(f\"Sentiment: {sentiment.classification}\")\n\ntext = \"This is the worst movie ever. It is bad. It is horrible.\"\nsentiment_analysis(text)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'spacy' API to perform sentiment analysis on a given text. The program should analyze the sentiment of the text and classify it as positive, negative, or neutral.\n\n### Response:"
    },
    {
        "api": "stumpy",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install stumpy\nimport stumpy\nimport numpy as np\n\n# Generate a random time series\nyour_time_series = np.random.rand(1000)\n\n# Specify the motif length\nmotif_length = 30\n\n# Perform motif discovery\nmotif_indices = stumpy.motif(your_time_series, motif_length)\n\n# Print the indices of identified motifs\nprint(f\"Motif Indices: {motif_indices}\")",
        "instruction": "Develop a Python program using the 'stumpy' API to perform motif discovery in a given time series. The program should allow the user to specify the desired motif length and find the motifs within the time series. It should return the indices of all identified motifs.",
        "prediction": ":import stumpy\nimport stumpy\nimport numpy as np\n\n# Generate a random time series\nyour_time_series = np.random.rand(1000)\n\n# Specify the motif length\nmotif_length = 50\n\n# Perform motif discovery\nmotif_indices = stumpy.motif(your_time_series, motif_length)\n\n# Print the indices of identified motifs\nprint(f\"Motif Indices: {motif_indices}\")",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program using the 'stumpy' API to perform motif discovery in a given time series. The program should allow the user to specify the desired motif length and find the motifs within the time series. It should return the indices of all identified motifs.\n\n### Response:"
    },
    {
        "api": "stumpy",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install stumpy\nimport stumpy\nimport numpy as np\n\n# Generate a random time series\nyour_time_series = np.random.rand(10000)\nwindow_size = 50  \n\n# Compute the e z-normalized matrix profile \nmatrix_profile = stumpy.stump(your_time_series, m=window_size)\n\noutput_file_path = \"matrix_profile.txt\"\nnp.savetxt(output_file_path, matrix_profile)",
        "instruction": "Develop a Python program using the 'stumpy' API to generate a matrix profile for a given random time series data. The program should compute the e z-normalized matrix profile, and the resulting profile should be saved to a text file.",
        "prediction": ":import stumpy as\ndep\n Generate a matrix profile for a random time series data\n Generate a matrix profile for a random time series data\n Generate a matrix profile for a random time series data\n Profile is saved to a text file\n!pip install stumpy\nimport stumpy as stumpy\n Import stumpy as stumpy\n Generate a matrix profile for a random time series data\n Generate a matrix profile for a random time series data\n Generate a matrix profile for a random time series data\n Profile is saved to a text file\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program using the 'stumpy' API to generate a matrix profile for a given random time series data. The program should compute the e z-normalized matrix profile, and the resulting profile should be saved to a text file.\n\n### Response:"
    },
    {
        "api": "supervision",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install ultralytics supervision opencv-python\nimport cv2\nfrom ultralytics import YOLO\nimport supervision as sv\nimport numpy as np\n\nZONE_POLYGON = np.array([\n    [0, 0],\n    [0.5, 0],\n    [0.5, 1],\n    [0, 1]\n])\nwebcam_resolution = (1280, 720)\n\nframe_width, frame_height = webcam_resolution\n\ncap = cv2.VideoCapture(0)\ncap.set(cv2.CAP_PROP_FRAME_WIDTH, frame_width)\ncap.set(cv2.CAP_PROP_FRAME_HEIGHT, frame_height)\n\nmodel = YOLO(\"yolov8s.pt\")\n\nbox_annotator = sv.BoxAnnotator(\n        thickness=2,\n        text_thickness=2,\n        text_scale=1\n    )\n\nzone_polygon = (ZONE_POLYGON * np.array(webcam_resolution)).astype(int)\nzone = sv.PolygonZone(polygon=zone_polygon, frame_resolution_wh=tuple(webcam_resolution))\nzone_annotator = sv.PolygonZoneAnnotator(\n        zone=zone, \n        color=sv.Color.red(),\n        thickness=2,\n        text_thickness=4,\n        text_scale=2\n    )\n\nwhile True:\n  _, frame = cap.read()\n\n  result = model(frame, agnostic_nms=True)[0]\n  detections = sv.Detections.from_ultralytics(result)\n  print(detections)\n  labels = [\n            f\"{model.model.names[class_id]} {confidence:0.2f}\"\n            for _, _, confidence, class_id, _\n            in detections\n        ]\n  frame = box_annotator.annotate(\n            scene=frame, \n            detections=detections, \n            labels=labels\n        )\n\n  zone.trigger(detections=detections)\n  frame = zone_annotator.annotate(scene=frame)      \n        \n  cv2.imshow(\"yolov8\", frame)\n\n  if (cv2.waitKey(30) == 27):\n      break",
        "instruction": "Develop a Python program that utilizes the 'supervision' API for object detection using a YOLO model on a webcam feed. Annotate detected objects with labels and draw a red polygon zone on the video frame. Use the Ultralytics YOLO model for object detection.",
        "prediction": ":import supervision opencv\nimport cv2\nimport os\n\n# Load the pre-trained YOLO model\nmodel_path = \"yolo_model.pb\"\nyolo = ulitytics.yolov3(model_path)\n\n# Read the video frame\nvc = cv2.VideoCapture(0)\nwhile vc.isOpened():\n    ret, frame = vc.read()\n    objects = yolo.detect_boxes(frame)\n\n    if len(objects) > 0:\n        for label, confidence, boxes in objects:\n            if label not in labels:\n                continue\n\n            for box in boxes:\n                xmin = round(box[0])\n                ymin = round(box[1])\n                xmax = round(box[2])\n                ymax = round(box[3])\n\n# Draw the boxes on the frame\ncv2.rectangle(frame, (xmin, ymin), (xmax, ymax), (0, 255, 0), 2)\n\n# Display the frame\ncv2.imshow(\"Frame\", frame)\ncv2.waitKey(0)\n\n# Release the frame and video capture\nvc.release()\ncv2.destroyAllWindows()",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that utilizes the 'supervision' API for object detection using a YOLO model on a webcam feed. Annotate detected objects with labels and draw a red polygon zone on the video frame. Use the Ultralytics YOLO model for object detection.\n\n### Response:"
    },
    {
        "api": "supervision",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install supervision torchvision\nimport torch\nimport torchvision.transforms as transforms\nimport supervision as sv\n\n# Load the pre-trained ResNet model\nmodel = torch.hub.load('pytorch/vision:v0.9.0', 'resnet18', pretrained=True)\nmodel.eval()\n\n# Define the image transformation pipeline\ntransform = transforms.Compose([\n    transforms.Resize((224, 224)),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n])\n\n# Load the image from file\nimage_path = 'image.jpg'\nimage = sv.Image.from_file(image_path)\n\n# Apply the transformation pipeline to the image\ninput_tensor = transform(image)\n\n# Add a batch dimension to the input tensor\ninput_tensor = input_tensor.unsqueeze(0)\n\n# Perform the classification\nwith torch.no_grad():\n    output = model(input_tensor)\n\n# Get the predicted class label and confidence score\n_, predicted_class = torch.max(output, 1)\nconfidence = torch.nn.functional.softmax(output, dim=1)[0, predicted_class]\n\n# Display the predicted class label and confidence score\nprint(f\"Predicted class: {predicted_class.item()}\")\nprint(f\"Confidence: {confidence.item()}\")",
        "instruction": "Develop a Python program that utilizes the 'supervision' API to perform image classification using a pre-trained ResNet model. Load an image from a file, classify it using the ResNet model, and display the predicted class label along with the confidence score.",
        "prediction": ":import supervision open image from a file\n# Load the pre-trained ResNet model\nimport cv2\nimport supervision as sv\n\n# Load the image from a file\nimage = sv.Image.from_file('a.jpg')\n\n# Perform image classification\nclass_label = sv.ClassLabel.classify(sv.Image.from_file('a.jpg'))\n\n# Display the predicted class label and confidence score\nprint(f\"Class Label: {class_label}\")\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that utilizes the 'supervision' API to perform image classification using a pre-trained ResNet model. Load an image from a file, classify it using the ResNet model, and display the predicted class label along with the confidence score.\n\n### Response:"
    },
    {
        "api": "tensorflow",
        "decoder_input_ids": true,
        "ground-truth": "#pip install tensorflow\nimport tensorflow as tf\nimport numpy as np\n\n# Generate synthetic data for binary classification\ndata_size = 1000\ndata_x = np.random.rand(data_size, 2)\ndata_y = (data_x[:, 0] + data_x[:, 1] > 1).astype(int)\n\n# Build a simple feedforward neural network\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Input(shape=(2,)),\n    tf.keras.layers.Dense(16, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model on the synthetic data\nprint(\"Training............\")\nmodel.fit(data_x, data_y, epochs=10)\n\n\nprint(\"\\nEvaluation............\")\nloss, accuracy = model.evaluate(data_x, data_y)\nprint(\"Accuracy: \",accuracy)\nprint(\"Loss: \",loss)\n\npredictions = model.predict(data_x)\nprint(\"Are all predictions between 0 and 1?\",np.all(predictions >= 0) and np.all(predictions <= 1))",
        "instruction": "Create a Python program that uses the 'tensorflow' API to build a simple feedforward neural network for binary classification. The program should generate synthetic data, compile the model, train it on the data, and evaluate its performance.",
        "prediction": ":import tensorflow as tf\nimport tensorflow as tf\nimport numpy as np\n\n# Generate synthetic data\ndata = np.linspace(1, 10, 100)\ndata = data.reshape([-1, 1])\n\n# Create model\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\nmodel.fit(data, data, epochs=5)\n\n# Print results\ntrain_performance = model.evaluate(data, data)\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses the 'tensorflow' API to build a simple feedforward neural network for binary classification. The program should generate synthetic data, compile the model, train it on the data, and evaluate its performance.\n\n### Response:"
    },
    {
        "api": "tensorflow",
        "decoder_input_ids": true,
        "ground-truth": "#pip install tensorflow\nimport tensorflow as tf\nimport numpy as np\n\n# Generate a synthetic sequence dataset\nseq_length = 100\nsequences = [np.random.randint(0, 10, size=seq_length) for _ in range(1000)]\ntargets = [np.sum(seq) for seq in sequences]\n\n# Preprocess the data\nsequences = tf.keras.preprocessing.sequence.pad_sequences(sequences, padding='post')\ntargets = np.array(targets)\n\n# Build a simple recurrent neural network\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(input_dim=10, output_dim=16, input_length=seq_length),\n    tf.keras.layers.LSTM(64, activation='relu', return_sequences=False),\n    tf.keras.layers.Dense(1)\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='mean_squared_error')\n\n# Train the model on the synthetic sequence data\nmodel.fit(sequences, targets, epochs=5)\n\n# Generate predictions on new sequences\nnew_sequence = np.array([np.random.randint(0, 10, size=seq_length)])\nprediction = model.predict(new_sequence)\nprint(\"Predicted sum of the new sequence:\", prediction[0][0])",
        "instruction": "Create a Python program that uses the 'tensorflow' API to implement a recurrent neural network (RNN) for sequence prediction. The program should use a sequence dataset, preprocess it, build an RNN model, train it, and generate predictions on new sequences.",
        "prediction": ":import tensorflow as tf\nimport numpy as np\n\n# Generate a sequences sequences for prediction\nsequence_datetet = generate the sequences\n\n# Convert sequences to sequences\ndataset = convert the sequences\n\n# Build a sequence dataset\ndataset = build a sequence dataset\n\n# Build an RNN model\nmodel = build an RNN model\n\n# Train the RNN\ntrain the RNN\n\n# Generate predictions on new sequences\ngenerate predictions on new sequences\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses the 'tensorflow' API to implement a recurrent neural network (RNN) for sequence prediction. The program should use a sequence dataset, preprocess it, build an RNN model, train it, and generate predictions on new sequences.\n\n### Response:"
    },
    {
        "api": "validators",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install validators\nimport validators\nimport requests\n\ndef validate_url(url):\n    if validators.url(url):\n        try:\n            response = requests.get(url)\n            if response.status_code == 200:\n                if validators.url(url, public=True, schemes=['https']):\n                    return \"Valid URL, reachable, and secure (HTTPS). Response status code: \" + str(response.status_code)\n                else:\n                    return \"Valid URL, reachable, but not secure (HTTP). Response status code: \" + str(response.status_code)\n            else:\n                return \"Valid URL but unreachable. Response status code: \" + str(response.status_code)\n        except requests.exceptions.RequestException:\n            return \"Valid URL but unreachable.\"\n    else:\n        return \"Invalid URL.\"\n\n# Get user inputs\nuser_url = input(\"Enter a URL: \")\n\n# Validate and display results\nprint(validate_url(user_url))\n",
        "instruction": "Create a Python program using the 'validators' API to validate user-provided URLs, checking if they adhere to the standard URL format. Additionally, the program should also check if the URL is reachable by making a request to it and display the response status code. If the URL is not reachable, the program should display an appropriate error message. Finally, the program should also check if the URL is secure (HTTPS) and display a message indicating its security status.",
        "prediction": ":import validators\nfrom validators import url as validate_url\n\nimport requests\n\ndef validate_url_secure(url):\n    try:\n        response = requests.get(url)\n        if response.status_code == 200:\n            return \"Secure (HTTPS)\"\n        else:\n            return \"Secure (HTTPS)\"\n    except requests.exceptions.RequestException:\n        return \"Secure (HTTPS)\"\n\nif validate_url(url):\n    try:\n        response = requests.get(url)\n        if response.status_code == 200:\n            return \"Secure (HTTPS)\"\n        else:\n            return \"Secure (HTTPS)\"\n    except requests.exceptions.RequestException:\n        return \"Secure (HTTPS)\"\nelse:\n    return \"Invalid URL.\"\n\nprint(validate_url_secure(url))\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'validators' API to validate user-provided URLs, checking if they adhere to the standard URL format. Additionally, the program should also check if the URL is reachable by making a request to it and display the response status code. If the URL is not reachable, the program should display an appropriate error message. Finally, the program should also check if the URL is secure (HTTPS) and display a message indicating its security status.\n\n### Response:"
    },
    {
        "api": "validators",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install validators\nimport validators\nimport smtplib\n\ndef validate_email(email):\n    if validators.email(email):\n        try:\n            server = smtplib.SMTP('smtp.gmail.com', 587)\n            server.starttls()\n            server.login(\"your_email_address\", \"your_email_password\")\n            response = server.sendmail(\"your_email_address\", email, \"Test message\")\n            server.quit()\n            if response == {}:\n                return \"Valid email address and deliverable.\"\n            else:\n                return \"Valid email address but undeliverable.\"\n        except smtplib.SMTPException:\n            return \"Valid email address but undeliverable.\"\n    else:\n        return \"Invalid email address.\"\n\n# Get user inputs\nuser_email = input(\"Enter an email address: \")\n\n# Validate and display results\nprint(validate_email(user_email))\n",
        "instruction": "Create a Python program using the 'validators' API to validate user-provided email addresses, checking if they adhere to the standard email format. Additionally, the program should also check if the email address is deliverable by making a request to the email server.",
        "prediction": ":import validators\nimport validators\n\ndef validate_email(email):\n    if validators.email(email):\n        if \"standard email format.\" or \"deliverable by making a request to the email server.\":\n            return \"Valid email address.\"\n        else:\n            return \"Valid email address.\"\n    else:\n        return \"Invalid email address.\"\n\n# Get user inputs\nuser_email = input(\"Enter an email address: \")\n\n# Validate and display results\nprint(validate_email(user_email))\n",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'validators' API to validate user-provided email addresses, checking if they adhere to the standard email format. Additionally, the program should also check if the email address is deliverable by making a request to the email server.\n\n### Response:"
    },
    {
        "api": "xarray",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install xarray\nimport xarray as xr\n\n# Read the NetCDF file\nds = xr.open_dataset('input.nc')\n\n# Extract the variable\nvar = ds['temperature']\n\n# Perform a mathematical operation on the variable\nvar_modified = var * 2\n\n# Save the modified variable to a new NetCDF file\nvar_modified.to_netcdf('output.nc')",
        "instruction": "Create a Python program using the 'xarray' API to read and manipulate a NetCDF file. The program should read a NetCDF file, extract a specific variable, perform a mathematical operation on the variable, and save the modified variable back to a new NetCDF file.",
        "prediction": ":import xarray as xr\nfrom xarray import open_dataset\n\n# Read the NetCDF file\nds = xr.open_dataset('input.nc')\n\n# Extract a specific variable\nvar = ds['var1']\n\n# Perform mathematical operation on the variable\nvar = var * 2\n\n# Save the modified variable back to a new NetCDF file\nvar.to_netcdf('output.nc')",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'xarray' API to read and manipulate a NetCDF file. The program should read a NetCDF file, extract a specific variable, perform a mathematical operation on the variable, and save the modified variable back to a new NetCDF file.\n\n### Response:"
    },
    {
        "api": "xarray",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install xarray\nimport xarray as xr\n\n# Read the NetCDF file\nds = xr.open_dataset('input.nc')\n\n# Select the variable\nvar = ds['temperature']\n\n# Slice the data along one or more dimensions\nsliced_data = var.sel(time=slice('2000-01-01', '2000-12-31'), lat=slice(0, 90))\n\n# Apply a mask based on a condition\nmask = sliced_data > 25\nmasked_data = sliced_data.where(mask)\n\n# Calculate the mean, standard deviation, and maximum value of the masked and sliced data along another specified dimension\nmean = masked_data.mean(dim='time')\nstd_dev = masked_data.std(dim='time')\nmax_value = masked_data.max(dim='time')\n\n# Print the calculated statistics\nprint(\"Mean: \", mean)\nprint(\"Standard Deviation: \", std_dev)\nprint(\"Maximum Value: \", max_value)",
        "instruction": "Create a Python program using the 'xarray' API to perform data slicing, masking, and aggregation on a multi-dimensional data array. The program should read a NetCDF file, select a specific variable, slice the data along one or more dimensions, apply a mask based on a condition, and then calculate the mean, standard deviation, and maximum value of the masked and sliced data along another specified dimension. Finally, the program should print the calculated statistics.",
        "prediction": ":import xarray as xr\n\n# Read the NetCDF file\nds = xr.open_dataset('input.nc')\n\n# Select the variable\nvar = ds['temperature']\n\n# Slice the data along one or more dimensions\nsliced_data = var.sel(time=slice('2000-01-01', '2000-12-31'), lat=slice(0, 90))\n\n# Apply a mask based on a condition\nmask = sliced_data > 25\nmasked_and_sliced_data = sliced_data.where(mask)\n\n# Calculate the mean, standard deviation, and maximum value of the masked and sliced data along another specified dimension\nmean = masked_and_sliced_data.mean(dim='time')\nstd_dev = masked_and_sliced_data.std(dim='time')\nmax_value = masked_and_sliced_data.max(dim='time')\n\n# Print the calculated statistics\nprint(\"Mean: \", mean)\nprint(\"Standard Deviation: \", std_dev)\nprint(\"Maximum Value: \", max_value)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program using the 'xarray' API to perform data slicing, masking, and aggregation on a multi-dimensional data array. The program should read a NetCDF file, select a specific variable, slice the data along one or more dimensions, apply a mask based on a condition, and then calculate the mean, standard deviation, and maximum value of the masked and sliced data along another specified dimension. Finally, the program should print the calculated statistics.\n\n### Response:"
    },
    {
        "api": "ydata-profiling",
        "decoder_input_ids": true,
        "ground-truth": "#! pip install ydata-profiling\nimport pandas as pd\nfrom ydata_profiling import ProfileReport\n\n# Load the JSONL data\ndata = pd.read_json('data.jsonl', lines=True)\n\n# Perform data profiling\nprofiling_report = ProfileReport(data)\n\n# Save the report as an HTML file\nprofiling_report.to_file('jsonl_data_profile.html')",
        "instruction": "Create a Python program that employs the 'ydata-profiling' API to profile a JSONL file named 'data.jsonl'. The profiling should include a count of records, data types of columns, and a table of unique values for a column named 'user_id'. Save the profiling report as an HTML file named 'jsonl_data_profile.html'.",
        "prediction": ":import ydata_profiling\nimport pandas as pd\nfrom ydata_profiling import ProfileReport\n\n# Load the JSONL data\ndata = pd.read_json('data.jsonl', lines=True)\n\n# Perform data profiling\nprofiling_report = ProfileReport(data)\n\n# Save the report as an HTML file\nprofiling_report.to_file('jsonl_data_profile.html')",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that employs the 'ydata-profiling' API to profile a JSONL file named 'data.jsonl'. The profiling should include a count of records, data types of columns, and a table of unique values for a column named 'user_id'. Save the profiling report as an HTML file named 'jsonl_data_profile.html'.\n\n### Response:"
    },
    {
        "api": "ydata-profiling",
        "decoder_input_ids": true,
        "ground-truth": "#! pip install ydata-profiling\nimport pandas as pd\nfrom ydata_profiling import ProfileReport\n\n# Load the CSV data\ndata = pd.read_csv(\"data.csv\")\n\n# Perform data profiling\nprofiling_report = ProfileReport(data)\n\n# Save the report as an HTML file\nprofiling_report.to_file(\"data_profile.html\")",
        "instruction": "Create a Python program that uses the \"ydata-profiling\" API to perform data profiling on a CSV file named \"data.csv.\" The profiling should include statistics like mean, median, and histograms for numeric columns. Save the profiling report as an HTML file named \"data_profile.html.\"",
        "prediction": ":import ydata-profiling\nfrom ydata_profiling import ProfileReport\nfrom ydata_profiling.config import DataNameReport\ndata_name_report = DataNameReport()\ndata_name_report.data_name = 'data.csv'\ndata_name_report.data_description = 'Data for data profiling on a CSV file named \"data.csv.\"'\ndata_name_report.data_license = 'Creative Commons Attribution'\nprofiling_report = ProfileReport(data_name_report)\nprofiling_report.to_file('data_profile.html')",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that uses the \"ydata-profiling\" API to perform data profiling on a CSV file named \"data.csv.\" The profiling should include statistics like mean, median, and histograms for numeric columns. Save the profiling report as an HTML file named \"data_profile.html.\"\n\n### Response:"
    },
    {
        "api": "langchain",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install langchain\n# Import necessary libraries\nfrom langchain.prompts import PromptTemplate\n\n# define the template\nprompt_template = PromptTemplate(\n    input_variables=[\"adjective\", \"content\"],\n    template = \"Tell me a {adjective} joke about {content}.\"\n)\n\n# can also use invoke syntax (applied to following examples as well)\nprompt_value = prompt_template.invoke({\"adjective\": \"funny\", \"content\": \"AI\"})\nprint(prompt_value)",
        "instruction": "Create a Python program that utilizes the \"langchain\" API to generate a prompt template that take to inputs adjective and content to till the model to generate a joke about the content with the given adjective. Then invoke the template with the inputs \"funny\" and \"AI\" to generate a joke about AI.",
        "prediction": ":import langchain\nimport langchain\n\n# Define a prompt template to take to adjective and content to aadjective and content\nprompt_template = [\"To {adjiction} {content}, I would like to say:\",\n                   \"To {adjiction}, {content}, I would like to say:\",\n                   \"To {adjiction}, {content}, I would like to say:\",\n                   \"I would like to say, {content}, {adjiction}.\"]\n\n# Define an example of an adjectice and content to be used in the prompt\ncontent_and_adj = {\"adjiction\": \"funny\", \"content\": \"AI\"}\n\n# Invoke the template with the inputs\nprompt = prompt_template(content_and_adj)\n\n# Print the joke about AI\nprint(prompt)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that utilizes the \"langchain\" API to generate a prompt template that take to inputs adjective and content to till the model to generate a joke about the content with the given adjective. Then invoke the template with the inputs \"funny\" and \"AI\" to generate a joke about AI.\n\n### Response:"
    },
    {
        "api": "langchain",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install langchain\n# Import necessary libraries\nfrom langchain.document_loaders import WebBaseLoader\n\n# Declare the loader\nloader = WebBaseLoader(\n    web_paths=(\"https://en.wikipedia.org/wiki/Germany\",),\n)\n# Use it to load the text data\ndocs = loader.load()\n\n# Let's look at a piece of text from the first document\ndocs[0].page_content[:1000]",
        "instruction": "Create a Python program that utilizes the \"langchain\" API to load the text from the Wikipedia page on Germany and print the first 1000 characters of the page content.",
        "prediction": ":import langchain\nimport langchain\n\n# Load the text from the Wikipedia on Germany\ndata = langchain.load_the_text_from_the_wikipedia_on_germany_on_de\n\n# Print the first 1000 characters of the page content\nprint(data[0:1000])",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that utilizes the \"langchain\" API to load the text from the Wikipedia page on Germany and print the first 1000 characters of the page content.\n\n### Response:"
    },
    {
        "api": "langchain",
        "decoder_input_ids": true,
        "ground-truth": "#!pip install langchain\n# Import necessary libraries\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain.document_loaders import WebBaseLoader\n\n# Declare the loader\nloader = WebBaseLoader(\n    web_paths=(\"https://en.wikipedia.org/wiki/Sinai_Peninsula\",),\n)\n# Use it to load the text data\ndocs = loader.load()\n\n# Declare the loader\ntext_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=1000,\n    chunk_overlap=200,\n    add_start_index=True\n)\n\n# Use it to split the data\nall_splits = text_splitter.split_documents(docs)",
        "instruction": "Create a Python program that utilizes the \"langchain\" API to load the text from the Wikipedia page on the Sinai Peninsula and split the text into chunks of 1000 characters with an overlap of 200 characters using Recursive Character Text Splitter.",
        "prediction": ":import langchain\nimport langchain\n\n# Load the text\nraw_text = langchain.load_the_text_from_the_wikipedia_page_on_the_seine_peninsula_and_split_the_text_into_chunks_of_1000_characters_using_recursive_character_text_splitter\n\n# Split the text into chunks of 1000 characters with an overlap of 200 characters\nchunks = langchain.split_the_text(raw_text, 1000, 200)\n\n# Split the text into chunks of 1000 characters with an overlap of 200 characters\nlangchain.split_the_text(raw_text, 1000, 200)\n\nimport langchain\n\n# Load the text\nraw_text = langchain.load_the_text_from_the_wikipedia_page_on_the_seine_peninsula_and_split_the_text_into_chunks_of_1000_characters_using_recursive_character_text_splitter\n\n# Split the text into chunks of 1000 characters with an overlap of 200 characters\nlangchain.split_the_text(raw_text, 1000, 200)\n\nimport langchain\n\n# Load the text\nraw_text = langchain.load_the_text_from_the_wikipedia_page_on_the_seine_peninsula_and_split_the_text_into_chunks_of_1000_characters_using_recursive_character_text_splitter\n\n# Split the text into chunks of 1000 characters with an overlap of 200 characters\nlangchain.split_the_text(raw_text, 1000, 200)\n\nimport langchain\n\n# Load the text\nraw_text = langchain.load_the_text_from_the_wikipedia_page_on_the_seine_peninsula_and_split_the_text_into_chunks_of_1000_characters_using_recursive_character_text_splitter\n\n# Split the text into chunks of 1000 characters with an overlap of 200 characters\nlangchain.split_the_text(raw_text, 1000, 200)\n\nimport langchain\n\n# Load the text\nraw_text = langchain.load_the_text_from_the_wikipedia_page_on_the_seine_peninsula_and_split_the_text_into_chunks_of_1000_characters_using_recursive_character_text_splitter\n\n# Split the text into chunks of 1000 characters with an overlap of 200 characters\nlangchain.split_the_text(raw_text, 1000, 200)\n\nimport langchain\n\n# Load the text\nraw_text = langchain.load_the_text_from_the_wikipedia_page_on_the_seine_peninsula_and_split_the_text_into_chunks_of_1000_characters_using_recursive_character_text_splitter\n\n# Split the text into chunks of 1000 characters with an overlap of 200 characters\nlangchain.split_the_text(raw_text, 1000, 200)\n\nimport langchain\n\n# Load the text\nraw_text = langchain.load_the_text_from_the_wikipedia_page_on_the_seine_peninsula_and_split_the_text_into_chunks_of_1000_characters_using_recursive_character_text_splitter\n\n# Split the text into chunks of 1000 characters with an overlap of 200 characters\nlangchain.split_the_text(raw_text, 1000, 200)\n\nimport langchain\n\n# Load the text\nraw_text = langchain.load_the_text_from_the_wikipedia_page_on_the_seine_peninsula_and_split_the_text_into_chunks_of_1000_characters_using_recursive_character_text_splitter\n\n# Split the text into chunks of 1000 characters with an overlap of 200 characters\nlangchain.split_the_text(raw_text, 1000, 200)",
        "source": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that utilizes the \"langchain\" API to load the text from the Wikipedia page on the Sinai Peninsula and split the text into chunks of 1000 characters with an overlap of 200 characters using Recursive Character Text Splitter.\n\n### Response:"
    }
]